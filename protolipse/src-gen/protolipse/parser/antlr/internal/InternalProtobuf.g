/*
 * generated by Xtext
 */
grammar InternalProtobuf;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package protolipse.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package protolipse.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import protolipse.services.ProtobufGrammarAccess;

}

@parser::members {

 	private ProtobufGrammarAccess grammarAccess;
 	
    public InternalProtobufParser(TokenStream input, ProtobufGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Proto";	
   	}
   	
   	@Override
   	protected ProtobufGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleProto
entryRuleProto returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getProtoRule()); }
	 iv_ruleProto=ruleProto 
	 { $current=$iv_ruleProto.current; } 
	 EOF 
;

// Rule Proto
ruleProto returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getProtoAccess().getSyntaxSyntaxParserRuleCall_0_0()); 
	    }
		lv_syntax_0_0=ruleSyntax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtoRule());
	        }
       		set(
       			$current, 
       			"syntax",
        		lv_syntax_0_0, 
        		"Syntax");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getProtoAccess().getStatementsStatementParserRuleCall_1_0()); 
	    }
		lv_statements_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProtoRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getPackageParserRuleCall_0()); 
    }
    this_Package_0=rulePackage
    { 
        $current = $this_Package_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getImportParserRuleCall_1()); 
    }
    this_Import_1=ruleImport
    { 
        $current = $this_Import_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getComplexTypeParserRuleCall_2()); 
    }
    this_ComplexType_2=ruleComplexType
    { 
        $current = $this_ComplexType_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((	'extend' 
)=>
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExtendParserRuleCall_3()); 
    }
    this_Extend_3=ruleExtend
    { 
        $current = $this_Extend_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getServiceParserRuleCall_4()); 
    }
    this_Service_4=ruleService
    { 
        $current = $this_Service_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getOptionParserRuleCall_5()); 
    }
    this_Option_5=ruleOption
    { 
        $current = $this_Option_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleSyntax
entryRuleSyntax returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSyntaxRule()); }
	 iv_ruleSyntax=ruleSyntax 
	 { $current=$iv_ruleSyntax.current; } 
	 EOF 
;

// Rule Syntax
ruleSyntax returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='syntax' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSyntaxAccess().getSyntaxKeyword_0());
    }
	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSyntaxAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_name_2_0=RULE_STRING
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSyntaxAccess().getNameSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSyntaxRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSyntaxAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRulePackage
entryRulePackage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	 iv_rulePackage=rulePackage 
	 { $current=$iv_rulePackage.current; } 
	 EOF 
;

// Rule Package
rulePackage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageAccess().getNameVar_fullParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleVar_full		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"Var_full");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageAccess().getSemicolonKeyword_2());
    }
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportAccess().getPublicImportParserRuleCall_0()); 
    }
    this_PublicImport_0=rulePublicImport
    { 
        $current = $this_PublicImport_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getImportAccess().getWeakImportParserRuleCall_1()); 
    }
    this_WeakImport_1=ruleWeakImport
    { 
        $current = $this_WeakImport_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePublicImport
entryRulePublicImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPublicImportRule()); }
	 iv_rulePublicImport=rulePublicImport 
	 { $current=$iv_rulePublicImport.current; } 
	 EOF 
;

// Rule PublicImport
rulePublicImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPublicImportAccess().getImportKeyword_0());
    }
	otherlv_1='public' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPublicImportAccess().getPublicKeyword_1());
    }
(
(
		lv_importURI_2_0=RULE_STRING
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getPublicImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPublicImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPublicImportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleWeakImport
entryRuleWeakImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWeakImportRule()); }
	 iv_ruleWeakImport=ruleWeakImport 
	 { $current=$iv_ruleWeakImport.current; } 
	 EOF 
;

// Rule WeakImport
ruleWeakImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWeakImportAccess().getImportKeyword_0());
    }
(	otherlv_1='weak' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWeakImportAccess().getWeakKeyword_1());
    }
)?(
(
		lv_importURI_2_0=RULE_STRING
		{
			newLeafNode(lv_importURI_2_0, grammarAccess.getWeakImportAccess().getImportURISTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWeakImportRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"importURI",
        		lv_importURI_2_0, 
        		"STRING");
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWeakImportAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleNativeOption)=>
    { 
        newCompositeNode(grammarAccess.getOptionAccess().getNativeOptionParserRuleCall_0()); 
    }
    this_NativeOption_0=ruleNativeOption
    { 
        $current = $this_NativeOption_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getOptionAccess().getCustomOptionParserRuleCall_1()); 
    }
    this_CustomOption_1=ruleCustomOption
    { 
        $current = $this_CustomOption_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNativeOption
entryRuleNativeOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNativeOptionRule()); }
	 iv_ruleNativeOption=ruleNativeOption 
	 { $current=$iv_ruleNativeOption.current; } 
	 EOF 
;

// Rule NativeOption
ruleNativeOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='option' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNativeOptionAccess().getOptionKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getNativeOptionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getNativeOptionAccess().getSourceMessageFieldCrossReference_1_0()); 
	    }
		ruleVar_full		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNativeOptionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNativeOptionAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeOptionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getNativeOptionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleCustomOption
entryRuleCustomOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCustomOptionRule()); }
	 iv_ruleCustomOption=ruleCustomOption 
	 { $current=$iv_ruleCustomOption.current; } 
	 EOF 
;

// Rule CustomOption
ruleCustomOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='option' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCustomOptionAccess().getOptionKeyword_0());
    }
(
(
		lv_source_1_0=RULE_ID
		{
			newLeafNode(lv_source_1_0, grammarAccess.getCustomOptionAccess().getSourceIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCustomOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"source",
        		lv_source_1_0, 
        		"ID");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCustomOptionAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCustomOptionAccess().getValueValueParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCustomOptionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCustomOptionAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getValueAccess().getSimpleValueLinkParserRuleCall()); 
    }
    this_SimpleValueLink_0=ruleSimpleValueLink
    { 
        $current = $this_SimpleValueLink_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleSimpleValueLink
entryRuleSimpleValueLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleValueLinkRule()); }
	 iv_ruleSimpleValueLink=ruleSimpleValueLink 
	 { $current=$iv_ruleSimpleValueLink.current; } 
	 EOF 
;

// Rule SimpleValueLink
ruleSimpleValueLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getSimpleValueLinkAccess().getNumberLinkParserRuleCall_0()); 
    }
    this_NumberLink_0=ruleNumberLink
    { 
        $current = $this_NumberLink_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleValueLinkAccess().getBooleanLinkParserRuleCall_1()); 
    }
    this_BooleanLink_1=ruleBooleanLink
    { 
        $current = $this_BooleanLink_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleValueLinkAccess().getStringLinkParserRuleCall_2()); 
    }
    this_StringLink_2=ruleStringLink
    { 
        $current = $this_StringLink_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleValueLinkAccess().getEnumLinkParserRuleCall_3()); 
    }
    this_EnumLink_3=ruleEnumLink
    { 
        $current = $this_EnumLink_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnumLink
entryRuleEnumLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumLinkRule()); }
	 iv_ruleEnumLink=ruleEnumLink 
	 { $current=$iv_ruleEnumLink.current; } 
	 EOF 
;

// Rule EnumLink
ruleEnumLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumLinkRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getEnumLinkAccess().getTargetEnumFieldCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleStringLink
entryRuleStringLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringLinkRule()); }
	 iv_ruleStringLink=ruleStringLink 
	 { $current=$iv_ruleStringLink.current; } 
	 EOF 
;

// Rule StringLink
ruleStringLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_target_0_0=RULE_STRING
		{
			newLeafNode(lv_target_0_0, grammarAccess.getStringLinkAccess().getTargetSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStringLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleBooleanLink
entryRuleBooleanLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanLinkRule()); }
	 iv_ruleBooleanLink=ruleBooleanLink 
	 { $current=$iv_ruleBooleanLink.current; } 
	 EOF 
;

// Rule BooleanLink
ruleBooleanLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanLinkAccess().getTargetBOOLEnumRuleCall_0()); 
	    }
		lv_target_0_0=ruleBOOL		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanLinkRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"BOOL");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNumberLink
entryRuleNumberLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberLinkRule()); }
	 iv_ruleNumberLink=ruleNumberLink 
	 { $current=$iv_ruleNumberLink.current; } 
	 EOF 
;

// Rule NumberLink
ruleNumberLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getNumberLinkAccess().getIntLinkParserRuleCall_0()); 
    }
    this_IntLink_0=ruleIntLink
    { 
        $current = $this_IntLink_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getNumberLinkAccess().getDoubleLinkParserRuleCall_1()); 
    }
    this_DoubleLink_1=ruleDoubleLink
    { 
        $current = $this_DoubleLink_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntLink
entryRuleIntLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntLinkRule()); }
	 iv_ruleIntLink=ruleIntLink 
	 { $current=$iv_ruleIntLink.current; } 
	 EOF 
;

// Rule IntLink
ruleIntLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_target_0_0=RULE_NUMINT
		{
			newLeafNode(lv_target_0_0, grammarAccess.getIntLinkAccess().getTargetNUMINTTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"NUMINT");
	    }

)
)
;





// Entry rule entryRuleDoubleLink
entryRuleDoubleLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleLinkRule()); }
	 iv_ruleDoubleLink=ruleDoubleLink 
	 { $current=$iv_ruleDoubleLink.current; } 
	 EOF 
;

// Rule DoubleLink
ruleDoubleLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_target_0_0=RULE_NUMDOUBLE
		{
			newLeafNode(lv_target_0_0, grammarAccess.getDoubleLinkAccess().getTargetNUMDOUBLETerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDoubleLinkRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"NUMDOUBLE");
	    }

)
)
;





// Entry rule entryRuleComplexType
entryRuleComplexType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexTypeRule()); }
	 iv_ruleComplexType=ruleComplexType 
	 { $current=$iv_ruleComplexType.current; } 
	 EOF 
;

// Rule ComplexType
ruleComplexType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComplexTypeAccess().getEnumParserRuleCall_0()); 
    }
    this_Enum_0=ruleEnum
    { 
        $current = $this_Enum_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getComplexTypeAccess().getExtensibleTypeParserRuleCall_1()); 
    }
    this_ExtensibleType_1=ruleExtensibleType
    { 
        $current = $this_ExtensibleType_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExtensibleType
entryRuleExtensibleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtensibleTypeRule()); }
	 iv_ruleExtensibleType=ruleExtensibleType 
	 { $current=$iv_ruleExtensibleType.current; } 
	 EOF 
;

// Rule ExtensibleType
ruleExtensibleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExtensibleTypeAccess().getMessageParserRuleCall_0()); 
    }
    this_Message_0=ruleMessage
    { 
        $current = $this_Message_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExtensibleTypeAccess().getGroupParserRuleCall_1()); 
    }
    this_Group_1=ruleGroup
    { 
        $current = $this_Group_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	 iv_ruleMessage=ruleMessage 
	 { $current=$iv_ruleMessage.current; } 
	 EOF 
;

// Rule Message
ruleMessage returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='message' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMessageAccess().getMessageKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getMessageAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMessageAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageAccess().getElementsMessageElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleMessageElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"MessageElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleMessageElement
entryRuleMessageElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageElementRule()); }
	 iv_ruleMessageElement=ruleMessageElement 
	 { $current=$iv_ruleMessageElement.current; } 
	 EOF 
;

// Rule MessageElement
ruleMessageElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getMessageParserRuleCall_0()); 
    }
    this_Message_0=ruleMessage
    { 
        $current = $this_Message_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getIndexedElementParserRuleCall_1()); 
    }
    this_IndexedElement_1=ruleIndexedElement
    { 
        $current = $this_IndexedElement_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getEnumParserRuleCall_2()); 
    }
    this_Enum_2=ruleEnum
    { 
        $current = $this_Enum_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getServiceParserRuleCall_3()); 
    }
    this_Service_3=ruleService
    { 
        $current = $this_Service_3.current; 
        afterParserOrEnumRuleCall();
    }

    |((	'extend' 
)=>
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getExtendParserRuleCall_4()); 
    }
    this_Extend_4=ruleExtend
    { 
        $current = $this_Extend_4.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getExtensionRangeParserRuleCall_5()); 
    }
    this_ExtensionRange_5=ruleExtensionRange
    { 
        $current = $this_ExtensionRange_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMessageElementAccess().getOptionParserRuleCall_6()); 
    }
    this_Option_6=ruleOption
    { 
        $current = $this_Option_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIndexedElement
entryRuleIndexedElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIndexedElementRule()); }
	 iv_ruleIndexedElement=ruleIndexedElement 
	 { $current=$iv_ruleIndexedElement.current; } 
	 EOF 
;

// Rule IndexedElement
ruleIndexedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIndexedElementAccess().getMessageFieldParserRuleCall_0()); 
    }
    this_MessageField_0=ruleMessageField
    { 
        $current = $this_MessageField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIndexedElementAccess().getGroupParserRuleCall_1()); 
    }
    this_Group_1=ruleGroup
    { 
        $current = $this_Group_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExtensionRange
entryRuleExtensionRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtensionRangeRule()); }
	 iv_ruleExtensionRange=ruleExtensionRange 
	 { $current=$iv_ruleExtensionRange.current; } 
	 EOF 
;

// Rule ExtensionRange
ruleExtensionRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extensions' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtensionRangeAccess().getExtensionsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtensionRangeAccess().getRangesRangeParserRuleCall_1_0()); 
	    }
		lv_ranges_1_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtensionRangeRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_1_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtensionRangeAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtensionRangeAccess().getRangesRangeParserRuleCall_2_1_0()); 
	    }
		lv_ranges_3_0=ruleRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtensionRangeRule());
	        }
       		add(
       			$current, 
       			"ranges",
        		lv_ranges_3_0, 
        		"Range");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtensionRangeAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleRange
entryRuleRange returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRangeRule()); }
	 iv_ruleRange=ruleRange 
	 { $current=$iv_ruleRange.current; } 
	 EOF 
;

// Rule Range
ruleRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_from_0_0=RULE_NUMINT
		{
			newLeafNode(lv_from_0_0, grammarAccess.getRangeAccess().getFromNUMINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"from",
        		lv_from_0_0, 
        		"NUMINT");
	    }

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRangeAccess().getToKeyword_1_0());
    }
((
(
		lv_to_2_0=RULE_NUMINT
		{
			newLeafNode(lv_to_2_0, grammarAccess.getRangeAccess().getToNUMINTTerminalRuleCall_1_1_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"to",
        		lv_to_2_0, 
        		"NUMINT");
	    }

)
)
    |(
(
		lv_max_3_0=	'max' 
    {
        newLeafNode(lv_max_3_0, grammarAccess.getRangeAccess().getMaxMaxKeyword_1_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRangeRule());
	        }
       		setWithLastConsumed($current, "max", true, "max");
	    }

)
)))?)
;





// Entry rule entryRuleMessageField
entryRuleMessageField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageFieldRule()); }
	 iv_ruleMessageField=ruleMessageField 
	 { $current=$iv_ruleMessageField.current; } 
	 EOF 
;

// Rule MessageField
ruleMessageField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMessageFieldAccess().getModifierModifierEnumRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageFieldRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageFieldAccess().getTypeTypeLinkParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleTypeLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageFieldRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"TypeLink");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageFieldAccess().getNameVarParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageFieldRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMessageFieldAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_index_4_0=RULE_NUMINT
		{
			newLeafNode(lv_index_4_0, grammarAccess.getMessageFieldAccess().getIndexNUMINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_4_0, 
        		"NUMINT");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMessageFieldAccess().getOptionsFieldOptionsParserRuleCall_5_0()); 
	    }
		lv_options_5_0=ruleFieldOptions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMessageFieldRule());
	        }
       		set(
       			$current, 
       			"options",
        		lv_options_5_0, 
        		"FieldOptions");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMessageFieldAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleGroup
entryRuleGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); }
	 iv_ruleGroup=ruleGroup 
	 { $current=$iv_ruleGroup.current; } 
	 EOF 
;

// Rule Group
ruleGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getModifierModifierEnumRuleCall_0_0()); 
	    }
		lv_modifier_0_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"modifier",
        		lv_modifier_0_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='group' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getGroupAccess().getGroupKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getNameVarParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleVar		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"Var");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getGroupAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_index_4_0=RULE_NUMINT
		{
			newLeafNode(lv_index_4_0, grammarAccess.getGroupAccess().getIndexNUMINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getGroupRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_4_0, 
        		"NUMINT");
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getGroupAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getGroupAccess().getElementsMessageFieldParserRuleCall_6_0()); 
	    }
		lv_elements_6_0=ruleMessageField		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getGroupRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_6_0, 
        		"MessageField");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getGroupAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleTypeLink
entryRuleTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeLinkRule()); }
	 iv_ruleTypeLink=ruleTypeLink 
	 { $current=$iv_ruleTypeLink.current; } 
	 EOF 
;

// Rule TypeLink
ruleTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	ruleScalarTypeLink)=>
    { 
        newCompositeNode(grammarAccess.getTypeLinkAccess().getScalarTypeLinkParserRuleCall_0()); 
    }
    this_ScalarTypeLink_0=ruleScalarTypeLink
    { 
        $current = $this_ScalarTypeLink_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getTypeLinkAccess().getComplexTypeLinkParserRuleCall_1()); 
    }
    this_ComplexTypeLink_1=ruleComplexTypeLink
    { 
        $current = $this_ComplexTypeLink_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleComplexTypeLink
entryRuleComplexTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComplexTypeLinkRule()); }
	 iv_ruleComplexTypeLink=ruleComplexTypeLink 
	 { $current=$iv_ruleComplexTypeLink.current; } 
	 EOF 
;

// Rule ComplexTypeLink
ruleComplexTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComplexTypeLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComplexTypeLinkAccess().getTargetComplexTypeCrossReference_0()); 
	    }
		ruleVar_full		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleScalarTypeLink
entryRuleScalarTypeLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScalarTypeLinkRule()); }
	 iv_ruleScalarTypeLink=ruleScalarTypeLink 
	 { $current=$iv_ruleScalarTypeLink.current; } 
	 EOF 
;

// Rule ScalarTypeLink
ruleScalarTypeLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getScalarTypeLinkAccess().getTargetScalarTypeEnumRuleCall_0()); 
	    }
		lv_target_0_0=ruleScalarType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScalarTypeLinkRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"ScalarType");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleFieldOptions
entryRuleFieldOptions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldOptionsRule()); }
	 iv_ruleFieldOptions=ruleFieldOptions 
	 { $current=$iv_ruleFieldOptions.current; } 
	 EOF 
;

// Rule FieldOptions
ruleFieldOptions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='[' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFieldOptionsAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldOptionsAccess().getOptionsFieldOptionParserRuleCall_1_0()); 
	    }
		lv_options_1_0=ruleFieldOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldOptionsRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_1_0, 
        		"FieldOption");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFieldOptionsAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldOptionsAccess().getOptionsFieldOptionParserRuleCall_2_1_0()); 
	    }
		lv_options_3_0=ruleFieldOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldOptionsRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_3_0, 
        		"FieldOption");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4=']' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFieldOptionsAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFieldOption
entryRuleFieldOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldOptionRule()); }
	 iv_ruleFieldOption=ruleFieldOption 
	 { $current=$iv_ruleFieldOption.current; } 
	 EOF 
;

// Rule FieldOption
ruleFieldOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'default' 
)=>
    { 
        newCompositeNode(grammarAccess.getFieldOptionAccess().getDefaultValueFieldOptionParserRuleCall_0()); 
    }
    this_DefaultValueFieldOption_0=ruleDefaultValueFieldOption
    { 
        $current = $this_DefaultValueFieldOption_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getFieldOptionAccess().getNativeFieldOptionParserRuleCall_1()); 
    }
    this_NativeFieldOption_1=ruleNativeFieldOption
    { 
        $current = $this_NativeFieldOption_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleDefaultValueFieldOption
entryRuleDefaultValueFieldOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDefaultValueFieldOptionRule()); }
	 iv_ruleDefaultValueFieldOption=ruleDefaultValueFieldOption 
	 { $current=$iv_ruleDefaultValueFieldOption.current; } 
	 EOF 
;

// Rule DefaultValueFieldOption
ruleDefaultValueFieldOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'default' 
)=>	otherlv_0='default' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDefaultValueFieldOptionAccess().getDefaultKeyword_0());
    }
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getDefaultValueFieldOptionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDefaultValueFieldOptionAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDefaultValueFieldOptionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleNativeFieldOption
entryRuleNativeFieldOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNativeFieldOptionRule()); }
	 iv_ruleNativeFieldOption=ruleNativeFieldOption 
	 { $current=$iv_ruleNativeFieldOption.current; } 
	 EOF 
;

// Rule NativeFieldOption
ruleNativeFieldOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNativeFieldOptionAccess().getSourceOptionSourceParserRuleCall_0_0()); 
	    }
		lv_source_0_0=ruleOptionSource		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeFieldOptionRule());
	        }
       		set(
       			$current, 
       			"source",
        		lv_source_0_0, 
        		"OptionSource");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNativeFieldOptionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNativeFieldOptionAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNativeFieldOptionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleOptionSource
entryRuleOptionSource returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionSourceRule()); }
	 iv_ruleOptionSource=ruleOptionSource 
	 { $current=$iv_ruleOptionSource.current; } 
	 EOF 
;

// Rule OptionSource
ruleOptionSource returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionSourceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getOptionSourceAccess().getTargetIndexedElementCrossReference_0()); 
	    }
		ruleVar_full		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleEnum
entryRuleEnum returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumRule()); }
	 iv_ruleEnum=ruleEnum 
	 { $current=$iv_ruleEnum.current; } 
	 EOF 
;

// Rule Enum
ruleEnum returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='enum' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEnumAccess().getEnumKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getEnumAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEnumAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumAccess().getElementsEnumElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleEnumElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"EnumElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getEnumAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleEnumElement
entryRuleEnumElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumElementRule()); }
	 iv_ruleEnumElement=ruleEnumElement 
	 { $current=$iv_ruleEnumElement.current; } 
	 EOF 
;

// Rule EnumElement
ruleEnumElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumElementAccess().getEnumFieldParserRuleCall_0()); 
    }
    this_EnumField_0=ruleEnumField
    { 
        $current = $this_EnumField_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getEnumElementAccess().getCustomOptionParserRuleCall_1()); 
    }
    this_CustomOption_1=ruleCustomOption
    { 
        $current = $this_CustomOption_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleEnumField
entryRuleEnumField returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumFieldRule()); }
	 iv_ruleEnumField=ruleEnumField 
	 { $current=$iv_ruleEnumField.current; } 
	 EOF 
;

// Rule EnumField
ruleEnumField returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEnumFieldAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEnumFieldAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_index_2_0=RULE_NUMINT
		{
			newLeafNode(lv_index_2_0, grammarAccess.getEnumFieldAccess().getIndexNUMINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEnumFieldRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"NUMINT");
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEnumFieldAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumFieldAccess().getOptionsFieldOptionParserRuleCall_3_1_0()); 
	    }
		lv_options_4_0=ruleFieldOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumFieldRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_4_0, 
        		"FieldOption");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEnumFieldAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEnumFieldAccess().getOptionsFieldOptionParserRuleCall_3_2_1_0()); 
	    }
		lv_options_6_0=ruleFieldOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEnumFieldRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_6_0, 
        		"FieldOption");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getEnumFieldAccess().getRightSquareBracketKeyword_3_3());
    }
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getEnumFieldAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleService
entryRuleService returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceRule()); }
	 iv_ruleService=ruleService 
	 { $current=$iv_ruleService.current; } 
	 EOF 
;

// Rule Service
ruleService returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='service' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getServiceAccess().getServiceKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getServiceAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getServiceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getServiceAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getServiceAccess().getElementsServiceElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleServiceElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getServiceRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"ServiceElement");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getServiceAccess().getRightCurlyBracketKeyword_4());
    }
(	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getServiceAccess().getSemicolonKeyword_5());
    }
)?)
;





// Entry rule entryRuleServiceElement
entryRuleServiceElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getServiceElementRule()); }
	 iv_ruleServiceElement=ruleServiceElement 
	 { $current=$iv_ruleServiceElement.current; } 
	 EOF 
;

// Rule ServiceElement
ruleServiceElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getServiceElementAccess().getRpcParserRuleCall_0()); 
    }
    this_Rpc_0=ruleRpc
    { 
        $current = $this_Rpc_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getServiceElementAccess().getOptionParserRuleCall_1()); 
    }
    this_Option_1=ruleOption
    { 
        $current = $this_Option_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleRpc
entryRuleRpc returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRpcRule()); }
	 iv_ruleRpc=ruleRpc 
	 { $current=$iv_ruleRpc.current; } 
	 EOF 
;

// Rule Rpc
ruleRpc returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='rpc' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRpcAccess().getRpcKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getRpcAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRpcRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRpcAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRpcAccess().getArgTypeMessageLinkParserRuleCall_3_0()); 
	    }
		lv_argType_3_0=ruleMessageLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRpcRule());
	        }
       		set(
       			$current, 
       			"argType",
        		lv_argType_3_0, 
        		"MessageLink");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRpcAccess().getRightParenthesisKeyword_4());
    }
	otherlv_5='returns' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getRpcAccess().getReturnsKeyword_5());
    }
	otherlv_6='(' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRpcAccess().getLeftParenthesisKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRpcAccess().getReturnTypeMessageLinkParserRuleCall_7_0()); 
	    }
		lv_returnType_7_0=ruleMessageLink		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRpcRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_7_0, 
        		"MessageLink");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRpcAccess().getRightParenthesisKeyword_8());
    }
(	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRpcAccess().getLeftCurlyBracketKeyword_9_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRpcAccess().getOptionsOptionParserRuleCall_9_1_0()); 
	    }
		lv_options_10_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRpcRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_10_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRpcAccess().getRightCurlyBracketKeyword_9_2());
    }
)?	otherlv_12=';' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRpcAccess().getSemicolonKeyword_10());
    }
)
;





// Entry rule entryRuleMessageLink
entryRuleMessageLink returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMessageLinkRule()); }
	 iv_ruleMessageLink=ruleMessageLink 
	 { $current=$iv_ruleMessageLink.current; } 
	 EOF 
;

// Rule MessageLink
ruleMessageLink returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getMessageLinkRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getMessageLinkAccess().getTargetMessageCrossReference_0()); 
	    }
		ruleFULL_ID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleExtend
entryRuleExtend returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExtendRule()); }
	 iv_ruleExtend=ruleExtend 
	 { $current=$iv_ruleExtend.current; } 
	 EOF 
;

// Rule Extend
ruleExtend returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'extend' 
)=>	otherlv_0='extend' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExtendAccess().getExtendKeyword_0());
    }
)(
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtendRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getExtendAccess().getTypeMessageCrossReference_1_0_0()); 
	}

    |		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getExtendRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getExtendAccess().getTypeMessageCrossReference_1_0_1()); 
	    }
		ruleFULL_ID		{ 
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getExtendAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExtendAccess().getElementsMessageElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleMessageElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExtendRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"MessageElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExtendAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleVar_full
entryRuleVar_full returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVar_fullRule()); } 
	 iv_ruleVar_full=ruleVar_full 
	 { $current=$iv_ruleVar_full.current.getText(); }  
	 EOF 
;

// Rule Var_full
ruleVar_full returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVar_fullAccess().getFULL_IDParserRuleCall_0()); 
    }
    this_FULL_ID_0=ruleFULL_ID    {
		$current.merge(this_FULL_ID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVar_fullAccess().getVarParserRuleCall_1()); 
    }
    this_Var_1=ruleVar    {
		$current.merge(this_Var_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleVar
entryRuleVar returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarRule()); } 
	 iv_ruleVar=ruleVar 
	 { $current=$iv_ruleVar.current.getText(); }  
	 EOF 
;

// Rule Var
ruleVar returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVarAccess().getIDTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getVarAccess().getVarReservedParserRuleCall_1()); 
    }
    this_VarReserved_1=ruleVarReserved    {
		$current.merge(this_VarReserved_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleFULL_ID
entryRuleFULL_ID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFULL_IDRule()); } 
	 iv_ruleFULL_ID=ruleFULL_ID 
	 { $current=$iv_ruleFULL_ID.current.getText(); }  
	 EOF 
;

// Rule FULL_ID
ruleFULL_ID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getFULL_IDAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFULL_IDAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getFULL_IDAccess().getIDTerminalRuleCall_1_1()); 
    }
)+)
    ;





// Entry rule entryRuleVarReserved
entryRuleVarReserved returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarReservedRule()); } 
	 iv_ruleVarReserved=ruleVarReserved 
	 { $current=$iv_ruleVarReserved.current.getText(); }  
	 EOF 
;

// Rule VarReserved
ruleVarReserved returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='to' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getToKeyword_0()); 
    }

    |
	kw='package' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getPackageKeyword_1()); 
    }

    |
	kw='syntax' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getSyntaxKeyword_2()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getImportKeyword_3()); 
    }

    |
	kw='option' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getOptionKeyword_4()); 
    }

    |
	kw='message' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getMessageKeyword_5()); 
    }

    |
	kw='service' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getServiceKeyword_6()); 
    }

    |
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getEnumKeyword_7()); 
    }

    |
	kw='required' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getRequiredKeyword_8()); 
    }

    |
	kw='optional' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getOptionalKeyword_9()); 
    }

    |
	kw='repeated' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getRepeatedKeyword_10()); 
    }

    |
	kw='extensions' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getExtensionsKeyword_11()); 
    }

    |
	kw='extend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getExtendKeyword_12()); 
    }

    |
	kw='group' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getGroupKeyword_13()); 
    }

    |
	kw='rpc' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getRpcKeyword_14()); 
    }

    |
	kw='returns' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getReturnsKeyword_15()); 
    }

    |
	kw='int32' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getInt32Keyword_16()); 
    }

    |
	kw='int64' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getInt64Keyword_17()); 
    }

    |
	kw='uint32' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getUint32Keyword_18()); 
    }

    |
	kw='uint64' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getUint64Keyword_19()); 
    }

    |
	kw='sint32' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getSint32Keyword_20()); 
    }

    |
	kw='sint64' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getSint64Keyword_21()); 
    }

    |
	kw='fixed32' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getFixed32Keyword_22()); 
    }

    |
	kw='fixed64' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getFixed64Keyword_23()); 
    }

    |
	kw='sfixed32' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getSfixed32Keyword_24()); 
    }

    |
	kw='sfixed64' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getSfixed64Keyword_25()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getFloatKeyword_26()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getDoubleKeyword_27()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getBoolKeyword_28()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getStringKeyword_29()); 
    }

    |
	kw='bytes' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getBytesKeyword_30()); 
    }

    |
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getDefaultKeyword_31()); 
    }

    |
	kw='max' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getMaxKeyword_32()); 
    }

    |
	kw='void' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVarReservedAccess().getVoidKeyword_33()); 
    }
)
    ;







// Rule BOOL
ruleBOOL returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getBOOLAccess().getTrueEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBOOLAccess().getTrueEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getBOOLAccess().getFalseEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBOOLAccess().getFalseEnumLiteralDeclaration_1()); 
    }
));



// Rule Modifier
ruleModifier returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='optional' 
	{
        $current = grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getModifierAccess().getOptionalEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='required' 
	{
        $current = grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getModifierAccess().getRequiredEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='repeated' 
	{
        $current = grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getModifierAccess().getRepeatedEnumLiteralDeclaration_2()); 
    }
));



// Rule ScalarType
ruleScalarType returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='int32' 
	{
        $current = grammarAccess.getScalarTypeAccess().getInt32EnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getScalarTypeAccess().getInt32EnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='int64' 
	{
        $current = grammarAccess.getScalarTypeAccess().getInt64EnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getScalarTypeAccess().getInt64EnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='uint32' 
	{
        $current = grammarAccess.getScalarTypeAccess().getUint32EnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getScalarTypeAccess().getUint32EnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='uint64' 
	{
        $current = grammarAccess.getScalarTypeAccess().getUint64EnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getScalarTypeAccess().getUint64EnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='sint32' 
	{
        $current = grammarAccess.getScalarTypeAccess().getSint32EnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getScalarTypeAccess().getSint32EnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='sint64' 
	{
        $current = grammarAccess.getScalarTypeAccess().getSint64EnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getScalarTypeAccess().getSint64EnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='fixed32' 
	{
        $current = grammarAccess.getScalarTypeAccess().getFixed32EnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getScalarTypeAccess().getFixed32EnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='fixed64' 
	{
        $current = grammarAccess.getScalarTypeAccess().getFixed64EnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getScalarTypeAccess().getFixed64EnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='sfixed32' 
	{
        $current = grammarAccess.getScalarTypeAccess().getSfixed32EnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getScalarTypeAccess().getSfixed32EnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='sfixed64' 
	{
        $current = grammarAccess.getScalarTypeAccess().getSfixed64EnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getScalarTypeAccess().getSfixed64EnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='float' 
	{
        $current = grammarAccess.getScalarTypeAccess().getFloatEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getScalarTypeAccess().getFloatEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='double' 
	{
        $current = grammarAccess.getScalarTypeAccess().getDoubleEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getScalarTypeAccess().getDoubleEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='bool' 
	{
        $current = grammarAccess.getScalarTypeAccess().getBoolEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getScalarTypeAccess().getBoolEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='string' 
	{
        $current = grammarAccess.getScalarTypeAccess().getStringEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getScalarTypeAccess().getStringEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='bytes' 
	{
        $current = grammarAccess.getScalarTypeAccess().getBytesEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getScalarTypeAccess().getBytesEnumLiteralDeclaration_14()); 
    }
));



RULE_NUMDOUBLE : RULE_NUMINT '.' RULE_INT;

RULE_NUMINT : ('0'|'-'? '1'..'9' RULE_INT*);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


