/*
 * generated by Xtext
 */
package protolipse.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ProtobufGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProtoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Proto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSyntaxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSyntaxSyntaxParserRuleCall_0_0 = (RuleCall)cSyntaxAssignment_0.eContents().get(0);
		private final Assignment cStatementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_1_0 = (RuleCall)cStatementsAssignment_1.eContents().get(0);
		
		//Proto:
		//	syntax=Syntax? statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }

		//syntax=Syntax? statements+=Statement*
		public Group getGroup() { return cGroup; }

		//syntax=Syntax?
		public Assignment getSyntaxAssignment_0() { return cSyntaxAssignment_0; }

		//Syntax
		public RuleCall getSyntaxSyntaxParserRuleCall_0_0() { return cSyntaxSyntaxParserRuleCall_0_0; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_1() { return cStatementsAssignment_1; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_0() { return cStatementsStatementParserRuleCall_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComplexTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cExtendParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cServiceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cOptionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		////TODO: annotation_entry | doc_entry 
		//Statement:
		//	Package | Import | ComplexType | Extend | Service | Option;
		@Override public ParserRule getRule() { return rule; }

		//Package | Import | ComplexType | Extend | Service | Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }

		//Import
		public RuleCall getImportParserRuleCall_1() { return cImportParserRuleCall_1; }

		//ComplexType
		public RuleCall getComplexTypeParserRuleCall_2() { return cComplexTypeParserRuleCall_2; }

		//Extend
		public RuleCall getExtendParserRuleCall_3() { return cExtendParserRuleCall_3; }

		//Service
		public RuleCall getServiceParserRuleCall_4() { return cServiceParserRuleCall_4; }

		//Option
		public RuleCall getOptionParserRuleCall_5() { return cOptionParserRuleCall_5; }
	}

	public class SyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Syntax");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSyntaxKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////annotation_entry
		////         :AT Var ( '(' annotation_keyval ( ',' annotation_keyval )* ')' )?
		////annotation_keyval
		////         :Var_full '=' ( VarReserved | ID | FULL_ID | NUMFLOAT | NUMINT | NUMDOUBLE | 'true' | FALSE | STRING )
		////doc_entry
		////         :DOC
		//Syntax:
		//	"syntax" "=" name=STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"syntax" "=" name=STRING ";"
		public Group getGroup() { return cGroup; }

		//"syntax"
		public Keyword getSyntaxKeyword_0() { return cSyntaxKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//name=STRING
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_2_0() { return cNameSTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameVar_fullParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Package:
		//	"package" name=Var_full ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" name=Var_full ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=Var_full
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//Var_full
		public RuleCall getNameVar_fullParserRuleCall_1_0() { return cNameVar_fullParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPublicImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWeakImportParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Import:
		//	PublicImport | WeakImport;
		@Override public ParserRule getRule() { return rule; }

		//PublicImport | WeakImport
		public Alternatives getAlternatives() { return cAlternatives; }

		//PublicImport
		public RuleCall getPublicImportParserRuleCall_0() { return cPublicImportParserRuleCall_0; }

		//WeakImport
		public RuleCall getWeakImportParserRuleCall_1() { return cWeakImportParserRuleCall_1; }
	}

	public class PublicImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PublicImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cPublicKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PublicImport:
		//	"import" "public" importURI=STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" "public" importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//"public"
		public Keyword getPublicKeyword_1() { return cPublicKeyword_1; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class WeakImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WeakImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cWeakKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cImportURIAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportURISTRINGTerminalRuleCall_2_0 = (RuleCall)cImportURIAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//WeakImport:
		//	"import" "weak"? importURI=STRING ";";
		@Override public ParserRule getRule() { return rule; }

		//"import" "weak"? importURI=STRING ";"
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//"weak"?
		public Keyword getWeakKeyword_1() { return cWeakKeyword_1; }

		//importURI=STRING
		public Assignment getImportURIAssignment_2() { return cImportURIAssignment_2; }

		//STRING
		public RuleCall getImportURISTRINGTerminalRuleCall_2_0() { return cImportURISTRINGTerminalRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNativeOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Option:
		//	NativeOption | CustomOption;
		@Override public ParserRule getRule() { return rule; }

		//=> NativeOption | CustomOption
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> NativeOption
		public RuleCall getNativeOptionParserRuleCall_0() { return cNativeOptionParserRuleCall_0; }

		//CustomOption
		public RuleCall getCustomOptionParserRuleCall_1() { return cCustomOptionParserRuleCall_1; }
	}

	public class NativeOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSourceMessageFieldCrossReference_1_0 = (CrossReference)cSourceAssignment_1.eContents().get(0);
		private final RuleCall cSourceMessageFieldVar_fullParserRuleCall_1_0_1 = (RuleCall)cSourceMessageFieldCrossReference_1_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: '('? name=Var_full ')'? AND complexTypes VarReserved | ID | FULL_ID |
		//NativeOption:
		//	"option" source=[MessageField|Var_full] "=" value=Value ";";
		@Override public ParserRule getRule() { return rule; }

		//"option" source=[MessageField|Var_full] "=" value=Value ";"
		public Group getGroup() { return cGroup; }

		//"option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//source=[MessageField|Var_full]
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//[MessageField|Var_full]
		public CrossReference getSourceMessageFieldCrossReference_1_0() { return cSourceMessageFieldCrossReference_1_0; }

		//Var_full
		public RuleCall getSourceMessageFieldVar_fullParserRuleCall_1_0_1() { return cSourceMessageFieldVar_fullParserRuleCall_1_0_1; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class CustomOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CustomOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOptionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSourceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSourceIDTerminalRuleCall_1_0 = (RuleCall)cSourceAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//CustomOption:
		//	"option" source=ID "=" value=Value ";";
		@Override public ParserRule getRule() { return rule; }

		//"option" source=ID "=" value=Value ";"
		public Group getGroup() { return cGroup; }

		//"option"
		public Keyword getOptionKeyword_0() { return cOptionKeyword_0; }

		//source=ID
		public Assignment getSourceAssignment_1() { return cSourceAssignment_1; }

		//ID
		public RuleCall getSourceIDTerminalRuleCall_1_0() { return cSourceIDTerminalRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//value=Value
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//Value
		public RuleCall getValueValueParserRuleCall_3_0() { return cValueValueParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final RuleCall cSimpleValueLinkParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////TODO: groups
		//Value:
		//	SimpleValueLink;
		@Override public ParserRule getRule() { return rule; }

		//SimpleValueLink
		public RuleCall getSimpleValueLinkParserRuleCall() { return cSimpleValueLinkParserRuleCall; }
	}

	public class SimpleValueLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleValueLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNumberLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringLinkParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumLinkParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SimpleValueLink:
		//	NumberLink | BooleanLink | StringLink | EnumLink;
		@Override public ParserRule getRule() { return rule; }

		//NumberLink | BooleanLink | StringLink | EnumLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//NumberLink
		public RuleCall getNumberLinkParserRuleCall_0() { return cNumberLinkParserRuleCall_0; }

		//BooleanLink
		public RuleCall getBooleanLinkParserRuleCall_1() { return cBooleanLinkParserRuleCall_1; }

		//StringLink
		public RuleCall getStringLinkParserRuleCall_2() { return cStringLinkParserRuleCall_2; }

		//EnumLink
		public RuleCall getEnumLinkParserRuleCall_3() { return cEnumLinkParserRuleCall_3; }
	}

	public class EnumLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetEnumFieldCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetEnumFieldIDTerminalRuleCall_0_1 = (RuleCall)cTargetEnumFieldCrossReference_0.eContents().get(1);
		
		//EnumLink:
		//	target=[EnumField];
		@Override public ParserRule getRule() { return rule; }

		//target=[EnumField]
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//[EnumField]
		public CrossReference getTargetEnumFieldCrossReference_0() { return cTargetEnumFieldCrossReference_0; }

		//ID
		public RuleCall getTargetEnumFieldIDTerminalRuleCall_0_1() { return cTargetEnumFieldIDTerminalRuleCall_0_1; }
	}

	public class StringLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetSTRINGTerminalRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//StringLink:
		//	target=STRING;
		@Override public ParserRule getRule() { return rule; }

		//target=STRING
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//STRING
		public RuleCall getTargetSTRINGTerminalRuleCall_0() { return cTargetSTRINGTerminalRuleCall_0; }
	}

	public class BooleanLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetBOOLEnumRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//BooleanLink:
		//	target=BOOL;
		@Override public ParserRule getRule() { return rule; }

		//target=BOOL
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//BOOL
		public RuleCall getTargetBOOLEnumRuleCall_0() { return cTargetBOOLEnumRuleCall_0; }
	}

	public class NumberLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDoubleLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NumberLink:
		//	IntLink | DoubleLink;
		@Override public ParserRule getRule() { return rule; }

		//IntLink | DoubleLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntLink
		public RuleCall getIntLinkParserRuleCall_0() { return cIntLinkParserRuleCall_0; }

		//DoubleLink
		public RuleCall getDoubleLinkParserRuleCall_1() { return cDoubleLinkParserRuleCall_1; }
	}

	public class IntLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetNUMINTTerminalRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//IntLink:
		//	target=NUMINT;
		@Override public ParserRule getRule() { return rule; }

		//target=NUMINT
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//NUMINT
		public RuleCall getTargetNUMINTTerminalRuleCall_0() { return cTargetNUMINTTerminalRuleCall_0; }
	}

	public class DoubleLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetNUMDOUBLETerminalRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//DoubleLink:
		//	target=NUMDOUBLE;
		@Override public ParserRule getRule() { return rule; }

		//target=NUMDOUBLE
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//NUMDOUBLE
		public RuleCall getTargetNUMDOUBLETerminalRuleCall_0() { return cTargetNUMDOUBLETerminalRuleCall_0; }
	}

	public class ComplexTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExtensibleTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ComplexType:
		//	Enum | ExtensibleType;
		@Override public ParserRule getRule() { return rule; }

		//Enum | ExtensibleType
		public Alternatives getAlternatives() { return cAlternatives; }

		//Enum
		public RuleCall getEnumParserRuleCall_0() { return cEnumParserRuleCall_0; }

		//ExtensibleType
		public RuleCall getExtensibleTypeParserRuleCall_1() { return cExtensibleTypeParserRuleCall_1; }
	}

	public class ExtensibleTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtensibleType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExtensibleType:
		//	Message | Group;
		@Override public ParserRule getRule() { return rule; }

		//Message | Group
		public Alternatives getAlternatives() { return cAlternatives; }

		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }

		//Group
		public RuleCall getGroupParserRuleCall_1() { return cGroupParserRuleCall_1; }
	}

	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Message");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMessageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsMessageElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Message:
		//	"message" name=ID "{" elements+=MessageElement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"message" name=ID "{" elements+=MessageElement* "}"
		public Group getGroup() { return cGroup; }

		//"message"
		public Keyword getMessageKeyword_0() { return cMessageKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=MessageElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//MessageElement
		public RuleCall getElementsMessageElementParserRuleCall_3_0() { return cElementsMessageElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class MessageElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIndexedElementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cServiceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExtendParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cExtensionRangeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cOptionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		////TODO: | annotation_entry | doc_entry 
		//MessageElement:
		//	Message | IndexedElement | Enum | Service | Extend | ExtensionRange | Option;
		@Override public ParserRule getRule() { return rule; }

		//Message | IndexedElement | Enum | Service | Extend | ExtensionRange | Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//Message
		public RuleCall getMessageParserRuleCall_0() { return cMessageParserRuleCall_0; }

		//IndexedElement
		public RuleCall getIndexedElementParserRuleCall_1() { return cIndexedElementParserRuleCall_1; }

		//Enum
		public RuleCall getEnumParserRuleCall_2() { return cEnumParserRuleCall_2; }

		//Service
		public RuleCall getServiceParserRuleCall_3() { return cServiceParserRuleCall_3; }

		//Extend
		public RuleCall getExtendParserRuleCall_4() { return cExtendParserRuleCall_4; }

		//ExtensionRange
		public RuleCall getExtensionRangeParserRuleCall_5() { return cExtensionRangeParserRuleCall_5; }

		//Option
		public RuleCall getOptionParserRuleCall_6() { return cOptionParserRuleCall_6; }
	}

	public class IndexedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndexedElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cGroupParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IndexedElement:
		//	MessageField | Group;
		@Override public ParserRule getRule() { return rule; }

		//MessageField | Group
		public Alternatives getAlternatives() { return cAlternatives; }

		//MessageField
		public RuleCall getMessageFieldParserRuleCall_0() { return cMessageFieldParserRuleCall_0; }

		//Group
		public RuleCall getGroupParserRuleCall_1() { return cGroupParserRuleCall_1; }
	}

	public class ExtensionRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExtensionRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtensionsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRangesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRangesRangeParserRuleCall_1_0 = (RuleCall)cRangesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRangesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRangesRangeParserRuleCall_2_1_0 = (RuleCall)cRangesAssignment_2_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExtensionRange:
		//	"extensions" ranges+=Range ("," ranges+=Range)* ";";
		@Override public ParserRule getRule() { return rule; }

		//"extensions" ranges+=Range ("," ranges+=Range)* ";"
		public Group getGroup() { return cGroup; }

		//"extensions"
		public Keyword getExtensionsKeyword_0() { return cExtensionsKeyword_0; }

		//ranges+=Range
		public Assignment getRangesAssignment_1() { return cRangesAssignment_1; }

		//Range
		public RuleCall getRangesRangeParserRuleCall_1_0() { return cRangesRangeParserRuleCall_1_0; }

		//("," ranges+=Range)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//ranges+=Range
		public Assignment getRangesAssignment_2_1() { return cRangesAssignment_2_1; }

		//Range
		public RuleCall getRangesRangeParserRuleCall_2_1_0() { return cRangesRangeParserRuleCall_2_1_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class RangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Range");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFromNUMINTTerminalRuleCall_0_0 = (RuleCall)cFromAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Assignment cToAssignment_1_1_0 = (Assignment)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cToNUMINTTerminalRuleCall_1_1_0_0 = (RuleCall)cToAssignment_1_1_0.eContents().get(0);
		private final Assignment cMaxAssignment_1_1_1 = (Assignment)cAlternatives_1_1.eContents().get(1);
		private final Keyword cMaxMaxKeyword_1_1_1_0 = (Keyword)cMaxAssignment_1_1_1.eContents().get(0);
		
		//Range:
		//	from=NUMINT ("to" (to=NUMINT | max?="max"))?;
		@Override public ParserRule getRule() { return rule; }

		//from=NUMINT ("to" (to=NUMINT | max?="max"))?
		public Group getGroup() { return cGroup; }

		//from=NUMINT
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//NUMINT
		public RuleCall getFromNUMINTTerminalRuleCall_0_0() { return cFromNUMINTTerminalRuleCall_0_0; }

		//("to" (to=NUMINT | max?="max"))?
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//to=NUMINT | max?="max"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//to=NUMINT
		public Assignment getToAssignment_1_1_0() { return cToAssignment_1_1_0; }

		//NUMINT
		public RuleCall getToNUMINTTerminalRuleCall_1_1_0_0() { return cToNUMINTTerminalRuleCall_1_1_0_0; }

		//max?="max"
		public Assignment getMaxAssignment_1_1_1() { return cMaxAssignment_1_1_1; }

		//"max"
		public Keyword getMaxMaxKeyword_1_1_1_0() { return cMaxMaxKeyword_1_1_1_0; }
	}

	public class MessageFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeLinkParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVarParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndexNUMINTTerminalRuleCall_4_0 = (RuleCall)cIndexAssignment_4.eContents().get(0);
		private final Assignment cOptionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cOptionsFieldOptionsParserRuleCall_5_0 = (RuleCall)cOptionsAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		////TODO: ignore_block
		//MessageField:
		//	modifier=Modifier type=TypeLink name=Var "=" index=NUMINT options=FieldOptions? ";";
		@Override public ParserRule getRule() { return rule; }

		//modifier=Modifier type=TypeLink name=Var "=" index=NUMINT options=FieldOptions? ";"
		public Group getGroup() { return cGroup; }

		//modifier=Modifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//Modifier
		public RuleCall getModifierModifierEnumRuleCall_0_0() { return cModifierModifierEnumRuleCall_0_0; }

		//type=TypeLink
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//TypeLink
		public RuleCall getTypeTypeLinkParserRuleCall_1_0() { return cTypeTypeLinkParserRuleCall_1_0; }

		//name=Var
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Var
		public RuleCall getNameVarParserRuleCall_2_0() { return cNameVarParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//index=NUMINT
		public Assignment getIndexAssignment_4() { return cIndexAssignment_4; }

		//NUMINT
		public RuleCall getIndexNUMINTTerminalRuleCall_4_0() { return cIndexNUMINTTerminalRuleCall_4_0; }

		//options=FieldOptions?
		public Assignment getOptionsAssignment_5() { return cOptionsAssignment_5; }

		//FieldOptions
		public RuleCall getOptionsFieldOptionsParserRuleCall_5_0() { return cOptionsFieldOptionsParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModifierModifierEnumRuleCall_0_0 = (RuleCall)cModifierAssignment_0.eContents().get(0);
		private final Keyword cGroupKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameVarParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIndexNUMINTTerminalRuleCall_4_0 = (RuleCall)cIndexAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cElementsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cElementsMessageFieldParserRuleCall_6_0 = (RuleCall)cElementsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Group:
		//	modifier=Modifier "group" name=Var "=" index=NUMINT "{" elements+=MessageField* "}";
		@Override public ParserRule getRule() { return rule; }

		//modifier=Modifier "group" name=Var "=" index=NUMINT "{" elements+=MessageField* "}"
		public Group getGroup() { return cGroup; }

		//modifier=Modifier
		public Assignment getModifierAssignment_0() { return cModifierAssignment_0; }

		//Modifier
		public RuleCall getModifierModifierEnumRuleCall_0_0() { return cModifierModifierEnumRuleCall_0_0; }

		//"group"
		public Keyword getGroupKeyword_1() { return cGroupKeyword_1; }

		//name=Var
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//Var
		public RuleCall getNameVarParserRuleCall_2_0() { return cNameVarParserRuleCall_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//index=NUMINT
		public Assignment getIndexAssignment_4() { return cIndexAssignment_4; }

		//NUMINT
		public RuleCall getIndexNUMINTTerminalRuleCall_4_0() { return cIndexNUMINTTerminalRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//elements+=MessageField*
		public Assignment getElementsAssignment_6() { return cElementsAssignment_6; }

		//MessageField
		public RuleCall getElementsMessageFieldParserRuleCall_6_0() { return cElementsMessageFieldParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class TypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cScalarTypeLinkParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComplexTypeLinkParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//TypeLink:
		//	ScalarTypeLink | ComplexTypeLink;
		@Override public ParserRule getRule() { return rule; }

		//=> ScalarTypeLink | ComplexTypeLink
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> ScalarTypeLink
		public RuleCall getScalarTypeLinkParserRuleCall_0() { return cScalarTypeLinkParserRuleCall_0; }

		//ComplexTypeLink
		public RuleCall getComplexTypeLinkParserRuleCall_1() { return cComplexTypeLinkParserRuleCall_1; }
	}

	public class ComplexTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComplexTypeLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetComplexTypeCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetComplexTypeVar_fullParserRuleCall_0_1 = (RuleCall)cTargetComplexTypeCrossReference_0.eContents().get(1);
		
		//ComplexTypeLink:
		//	target=[ComplexType|Var_full];
		@Override public ParserRule getRule() { return rule; }

		//target=[ComplexType|Var_full]
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//[ComplexType|Var_full]
		public CrossReference getTargetComplexTypeCrossReference_0() { return cTargetComplexTypeCrossReference_0; }

		//Var_full
		public RuleCall getTargetComplexTypeVar_fullParserRuleCall_0_1() { return cTargetComplexTypeVar_fullParserRuleCall_0_1; }
	}

	public class ScalarTypeLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarTypeLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTargetScalarTypeEnumRuleCall_0 = (RuleCall)cTargetAssignment.eContents().get(0);
		
		//ScalarTypeLink:
		//	target=ScalarType;
		@Override public ParserRule getRule() { return rule; }

		//target=ScalarType
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//ScalarType
		public RuleCall getTargetScalarTypeEnumRuleCall_0() { return cTargetScalarTypeEnumRuleCall_0; }
	}

	public class FieldOptionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldOptions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOptionsFieldOptionParserRuleCall_1_0 = (RuleCall)cOptionsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOptionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOptionsFieldOptionParserRuleCall_2_1_0 = (RuleCall)cOptionsAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FieldOptions:
		//	"[" options+=FieldOption ("," options+=FieldOption)* "]";
		@Override public ParserRule getRule() { return rule; }

		//"[" options+=FieldOption ("," options+=FieldOption)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//options+=FieldOption
		public Assignment getOptionsAssignment_1() { return cOptionsAssignment_1; }

		//FieldOption
		public RuleCall getOptionsFieldOptionParserRuleCall_1_0() { return cOptionsFieldOptionParserRuleCall_1_0; }

		//("," options+=FieldOption)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//options+=FieldOption
		public Assignment getOptionsAssignment_2_1() { return cOptionsAssignment_2_1; }

		//FieldOption
		public RuleCall getOptionsFieldOptionParserRuleCall_2_1_0() { return cOptionsFieldOptionParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class FieldOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldOption");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDefaultValueFieldOptionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNativeFieldOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//FieldOption:
		//	DefaultValueFieldOption | NativeFieldOption;
		@Override public ParserRule getRule() { return rule; }

		//DefaultValueFieldOption | NativeFieldOption
		public Alternatives getAlternatives() { return cAlternatives; }

		//DefaultValueFieldOption
		public RuleCall getDefaultValueFieldOptionParserRuleCall_0() { return cDefaultValueFieldOptionParserRuleCall_0; }

		//NativeFieldOption
		public RuleCall getNativeFieldOptionParserRuleCall_1() { return cNativeFieldOptionParserRuleCall_1; }
	}

	public class DefaultValueFieldOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DefaultValueFieldOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefaultKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//DefaultValueFieldOption:
		//	"default" "=" value=Value;
		@Override public ParserRule getRule() { return rule; }

		//=> "default" "=" value=Value
		public Group getGroup() { return cGroup; }

		//=> "default"
		public Keyword getDefaultKeyword_0() { return cDefaultKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class NativeFieldOptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NativeFieldOption");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSourceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSourceOptionSourceParserRuleCall_0_0 = (RuleCall)cSourceAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//NativeFieldOption:
		//	source=OptionSource "=" value=Value;
		@Override public ParserRule getRule() { return rule; }

		//source=OptionSource "=" value=Value
		public Group getGroup() { return cGroup; }

		//source=OptionSource
		public Assignment getSourceAssignment_0() { return cSourceAssignment_0; }

		//OptionSource
		public RuleCall getSourceOptionSourceParserRuleCall_0_0() { return cSourceOptionSourceParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class OptionSourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OptionSource");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetIndexedElementCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetIndexedElementVar_fullParserRuleCall_0_1 = (RuleCall)cTargetIndexedElementCrossReference_0.eContents().get(1);
		
		//OptionSource:
		//	target=[IndexedElement|Var_full];
		@Override public ParserRule getRule() { return rule; }

		//target=[IndexedElement|Var_full]
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//[IndexedElement|Var_full]
		public CrossReference getTargetIndexedElementCrossReference_0() { return cTargetIndexedElementCrossReference_0; }

		//Var_full
		public RuleCall getTargetIndexedElementVar_fullParserRuleCall_0_1() { return cTargetIndexedElementVar_fullParserRuleCall_0_1; }
	}

	public class EnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Enum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEnumElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Enum:
		//	"enum" name=ID "{" elements+=EnumElement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" elements+=EnumElement* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=EnumElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//EnumElement
		public RuleCall getElementsEnumElementParserRuleCall_3_0() { return cElementsEnumElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEnumFieldParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCustomOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EnumElement:
		//	EnumField | CustomOption;
		@Override public ParserRule getRule() { return rule; }

		//EnumField | CustomOption
		public Alternatives getAlternatives() { return cAlternatives; }

		//EnumField
		public RuleCall getEnumFieldParserRuleCall_0() { return cEnumFieldParserRuleCall_0; }

		//CustomOption
		public RuleCall getCustomOptionParserRuleCall_1() { return cCustomOptionParserRuleCall_1; }
	}

	public class EnumFieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumField");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexNUMINTTerminalRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOptionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOptionsFieldOptionParserRuleCall_3_1_0 = (RuleCall)cOptionsAssignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cCommaKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cOptionsAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cOptionsFieldOptionParserRuleCall_3_2_1_0 = (RuleCall)cOptionsAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumField:
		//	name=ID "=" index=NUMINT ("[" options+=FieldOption ("," options+=FieldOption)* "]")? ";";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "=" index=NUMINT ("[" options+=FieldOption ("," options+=FieldOption)* "]")? ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//index=NUMINT
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//NUMINT
		public RuleCall getIndexNUMINTTerminalRuleCall_2_0() { return cIndexNUMINTTerminalRuleCall_2_0; }

		//("[" options+=FieldOption ("," options+=FieldOption)* "]")?
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//options+=FieldOption
		public Assignment getOptionsAssignment_3_1() { return cOptionsAssignment_3_1; }

		//FieldOption
		public RuleCall getOptionsFieldOptionParserRuleCall_3_1_0() { return cOptionsFieldOptionParserRuleCall_3_1_0; }

		//("," options+=FieldOption)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//","
		public Keyword getCommaKeyword_3_2_0() { return cCommaKeyword_3_2_0; }

		//options+=FieldOption
		public Assignment getOptionsAssignment_3_2_1() { return cOptionsAssignment_3_2_1; }

		//FieldOption
		public RuleCall getOptionsFieldOptionParserRuleCall_3_2_1_0() { return cOptionsFieldOptionParserRuleCall_3_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_3() { return cRightSquareBracketKeyword_3_3; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsServiceElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Service:
		//	"service" name=ID "{" elements+=ServiceElement+ "}" ";"?;
		@Override public ParserRule getRule() { return rule; }

		//"service" name=ID "{" elements+=ServiceElement+ "}" ";"?
		public Group getGroup() { return cGroup; }

		//"service"
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=ServiceElement+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//ServiceElement
		public RuleCall getElementsServiceElementParserRuleCall_3_0() { return cElementsServiceElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }

		//";"?
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class ServiceElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ServiceElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRpcParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ServiceElement:
		//	Rpc | Option;
		@Override public ParserRule getRule() { return rule; }

		//Rpc | Option
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rpc
		public RuleCall getRpcParserRuleCall_0() { return cRpcParserRuleCall_0; }

		//Option
		public RuleCall getOptionParserRuleCall_1() { return cOptionParserRuleCall_1; }
	}

	public class RpcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rpc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRpcKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgTypeMessageLinkParserRuleCall_3_0 = (RuleCall)cArgTypeAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cReturnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cReturnTypeAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cReturnTypeMessageLinkParserRuleCall_7_0 = (RuleCall)cReturnTypeAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLeftCurlyBracketKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cOptionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cOptionsOptionParserRuleCall_9_1_0 = (RuleCall)cOptionsAssignment_9_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cSemicolonKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//Rpc:
		//	"rpc" name=ID "(" argType=MessageLink ")" "returns" "(" returnType=MessageLink ")" ("{" options+=Option* "}")? ";";
		@Override public ParserRule getRule() { return rule; }

		//"rpc" name=ID "(" argType=MessageLink ")" "returns" "(" returnType=MessageLink ")" ("{" options+=Option* "}")? ";"
		public Group getGroup() { return cGroup; }

		//"rpc"
		public Keyword getRpcKeyword_0() { return cRpcKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//argType=MessageLink
		public Assignment getArgTypeAssignment_3() { return cArgTypeAssignment_3; }

		//MessageLink
		public RuleCall getArgTypeMessageLinkParserRuleCall_3_0() { return cArgTypeMessageLinkParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"returns"
		public Keyword getReturnsKeyword_5() { return cReturnsKeyword_5; }

		//"("
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }

		//returnType=MessageLink
		public Assignment getReturnTypeAssignment_7() { return cReturnTypeAssignment_7; }

		//MessageLink
		public RuleCall getReturnTypeMessageLinkParserRuleCall_7_0() { return cReturnTypeMessageLinkParserRuleCall_7_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }

		//("{" options+=Option* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_0() { return cLeftCurlyBracketKeyword_9_0; }

		//options+=Option*
		public Assignment getOptionsAssignment_9_1() { return cOptionsAssignment_9_1; }

		//Option
		public RuleCall getOptionsOptionParserRuleCall_9_1_0() { return cOptionsOptionParserRuleCall_9_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_2() { return cRightCurlyBracketKeyword_9_2; }

		//";"
		public Keyword getSemicolonKeyword_10() { return cSemicolonKeyword_10; }
	}

	public class MessageLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageLink");
		private final Assignment cTargetAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cTargetMessageCrossReference_0 = (CrossReference)cTargetAssignment.eContents().get(0);
		private final RuleCall cTargetMessageFULL_IDParserRuleCall_0_1 = (RuleCall)cTargetMessageCrossReference_0.eContents().get(1);
		
		////TODO: VOID 'void'
		//MessageLink:
		//	target=[Message|FULL_ID];
		@Override public ParserRule getRule() { return rule; }

		//target=[Message|FULL_ID]
		public Assignment getTargetAssignment() { return cTargetAssignment; }

		//[Message|FULL_ID]
		public CrossReference getTargetMessageCrossReference_0() { return cTargetMessageCrossReference_0; }

		//FULL_ID
		public RuleCall getTargetMessageFULL_IDParserRuleCall_0_1() { return cTargetMessageFULL_IDParserRuleCall_0_1; }
	}

	public class ExtendElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Extend");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExtendKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTypeAlternatives_1_0 = (Alternatives)cTypeAssignment_1.eContents().get(0);
		private final CrossReference cTypeMessageCrossReference_1_0_0 = (CrossReference)cTypeAlternatives_1_0.eContents().get(0);
		private final RuleCall cTypeMessageIDTerminalRuleCall_1_0_0_1 = (RuleCall)cTypeMessageCrossReference_1_0_0.eContents().get(1);
		private final CrossReference cTypeMessageCrossReference_1_0_1 = (CrossReference)cTypeAlternatives_1_0.eContents().get(1);
		private final RuleCall cTypeMessageFULL_IDParserRuleCall_1_0_1_1 = (RuleCall)cTypeMessageCrossReference_1_0_1.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsMessageElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////TODO: type group?
		//Extend:
		//	"extend" type=([Message] | [Message|FULL_ID]) "{" elements+=MessageElement* "}";
		@Override public ParserRule getRule() { return rule; }

		//=> "extend" type=([Message] | [Message|FULL_ID]) "{" elements+=MessageElement* "}"
		public Group getGroup() { return cGroup; }

		//=> "extend"
		public Keyword getExtendKeyword_0() { return cExtendKeyword_0; }

		//type=([Message] | [Message|FULL_ID])
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//([Message] | [Message|FULL_ID])
		public Alternatives getTypeAlternatives_1_0() { return cTypeAlternatives_1_0; }

		//[Message]
		public CrossReference getTypeMessageCrossReference_1_0_0() { return cTypeMessageCrossReference_1_0_0; }

		//ID
		public RuleCall getTypeMessageIDTerminalRuleCall_1_0_0_1() { return cTypeMessageIDTerminalRuleCall_1_0_0_1; }

		//[Message|FULL_ID]
		public CrossReference getTypeMessageCrossReference_1_0_1() { return cTypeMessageCrossReference_1_0_1; }

		//FULL_ID
		public RuleCall getTypeMessageFULL_IDParserRuleCall_1_0_1_1() { return cTypeMessageFULL_IDParserRuleCall_1_0_1_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=MessageElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//MessageElement
		public RuleCall getElementsMessageElementParserRuleCall_3_0() { return cElementsMessageElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class Var_fullElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var_full");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cFULL_IDParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Var_full:
		//	FULL_ID | Var;
		@Override public ParserRule getRule() { return rule; }

		//FULL_ID | Var
		public Alternatives getAlternatives() { return cAlternatives; }

		//FULL_ID
		public RuleCall getFULL_IDParserRuleCall_0() { return cFULL_IDParserRuleCall_0; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVarReservedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Var:
		//	ID | VarReserved;
		@Override public ParserRule getRule() { return rule; }

		//ID | VarReserved
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//VarReserved
		public RuleCall getVarReservedParserRuleCall_1() { return cVarReservedParserRuleCall_1; }
	}

	public class FULL_IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FULL_ID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//FULL_ID:
		//	ID ("." ID)+;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class VarReservedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarReserved");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cSyntaxKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cImportKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cOptionKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMessageKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cServiceKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cEnumKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cRequiredKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cOptionalKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cRepeatedKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cExtensionsKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cExtendKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cGroupKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cRpcKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cReturnsKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cInt32Keyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cInt64Keyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cUint32Keyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cUint64Keyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cSint32Keyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cSint64Keyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cFixed32Keyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cFixed64Keyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cSfixed32Keyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cSfixed64Keyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cFloatKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cDoubleKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cBoolKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cStringKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cBytesKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cDefaultKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cMaxKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cVoidKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		
		//VarReserved:
		//	"to" | "package" | "syntax" | "import" | "option" | "message" | "service" | "enum" | "required" | "optional" |
		//	"repeated" | "extensions" | "extend" | "group" | "rpc" | "returns" | "int32" | "int64" | "uint32" | "uint64" |
		//	"sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "float" | "double" | "bool" | "string" |
		//	"bytes" | "default" | "max" | "void";
		@Override public ParserRule getRule() { return rule; }

		//"to" | "package" | "syntax" | "import" | "option" | "message" | "service" | "enum" | "required" | "optional" |
		//"repeated" | "extensions" | "extend" | "group" | "rpc" | "returns" | "int32" | "int64" | "uint32" | "uint64" | "sint32"
		//| "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "float" | "double" | "bool" | "string" | "bytes" |
		//"default" | "max" | "void"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"to"
		public Keyword getToKeyword_0() { return cToKeyword_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//"syntax"
		public Keyword getSyntaxKeyword_2() { return cSyntaxKeyword_2; }

		//"import"
		public Keyword getImportKeyword_3() { return cImportKeyword_3; }

		//"option"
		public Keyword getOptionKeyword_4() { return cOptionKeyword_4; }

		//"message"
		public Keyword getMessageKeyword_5() { return cMessageKeyword_5; }

		//"service"
		public Keyword getServiceKeyword_6() { return cServiceKeyword_6; }

		//"enum"
		public Keyword getEnumKeyword_7() { return cEnumKeyword_7; }

		//"required"
		public Keyword getRequiredKeyword_8() { return cRequiredKeyword_8; }

		//"optional"
		public Keyword getOptionalKeyword_9() { return cOptionalKeyword_9; }

		//"repeated"
		public Keyword getRepeatedKeyword_10() { return cRepeatedKeyword_10; }

		//"extensions"
		public Keyword getExtensionsKeyword_11() { return cExtensionsKeyword_11; }

		//"extend"
		public Keyword getExtendKeyword_12() { return cExtendKeyword_12; }

		//"group"
		public Keyword getGroupKeyword_13() { return cGroupKeyword_13; }

		//"rpc"
		public Keyword getRpcKeyword_14() { return cRpcKeyword_14; }

		//"returns"
		public Keyword getReturnsKeyword_15() { return cReturnsKeyword_15; }

		//"int32"
		public Keyword getInt32Keyword_16() { return cInt32Keyword_16; }

		//"int64"
		public Keyword getInt64Keyword_17() { return cInt64Keyword_17; }

		//"uint32"
		public Keyword getUint32Keyword_18() { return cUint32Keyword_18; }

		//"uint64"
		public Keyword getUint64Keyword_19() { return cUint64Keyword_19; }

		//"sint32"
		public Keyword getSint32Keyword_20() { return cSint32Keyword_20; }

		//"sint64"
		public Keyword getSint64Keyword_21() { return cSint64Keyword_21; }

		//"fixed32"
		public Keyword getFixed32Keyword_22() { return cFixed32Keyword_22; }

		//"fixed64"
		public Keyword getFixed64Keyword_23() { return cFixed64Keyword_23; }

		//"sfixed32"
		public Keyword getSfixed32Keyword_24() { return cSfixed32Keyword_24; }

		//"sfixed64"
		public Keyword getSfixed64Keyword_25() { return cSfixed64Keyword_25; }

		//"float"
		public Keyword getFloatKeyword_26() { return cFloatKeyword_26; }

		//"double"
		public Keyword getDoubleKeyword_27() { return cDoubleKeyword_27; }

		//"bool"
		public Keyword getBoolKeyword_28() { return cBoolKeyword_28; }

		//"string"
		public Keyword getStringKeyword_29() { return cStringKeyword_29; }

		//"bytes"
		public Keyword getBytesKeyword_30() { return cBytesKeyword_30; }

		//"default"
		public Keyword getDefaultKeyword_31() { return cDefaultKeyword_31; }

		//"max"
		public Keyword getMaxKeyword_32() { return cMaxKeyword_32; }

		//"void"
		public Keyword getVoidKeyword_33() { return cVoidKeyword_33; }
	}

	public class EXPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNUMINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cEKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cNUMINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		////HEX returns ecore::ELong: '-'? '0' ( 'x' | 'X' ) HEX_DIGIT+;
		//EXP returns ecore::ELong:
		//	NUMINT ("e" | "E") NUMINT;
		@Override public ParserRule getRule() { return rule; }

		//NUMINT ("e" | "E") NUMINT
		public Group getGroup() { return cGroup; }

		//NUMINT
		public RuleCall getNUMINTTerminalRuleCall_0() { return cNUMINTTerminalRuleCall_0; }

		//"e" | "E"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"e"
		public Keyword getEKeyword_1_0() { return cEKeyword_1_0; }

		//"E"
		public Keyword getEKeyword_1_1() { return cEKeyword_1_1; }

		//NUMINT
		public RuleCall getNUMINTTerminalRuleCall_2() { return cNUMINTTerminalRuleCall_2; }
	}
	
	
	public class BOOLElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BOOL:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}

	public class ModifierElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOptionalEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOptionalOptionalKeyword_0_0 = (Keyword)cOptionalEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRequiredEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRequiredRequiredKeyword_1_0 = (Keyword)cRequiredEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRepeatedEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRepeatedRepeatedKeyword_2_0 = (Keyword)cRepeatedEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Modifier:
		//	optional | required | repeated;
		public EnumRule getRule() { return rule; }

		//optional | required | repeated
		public Alternatives getAlternatives() { return cAlternatives; }

		//optional
		public EnumLiteralDeclaration getOptionalEnumLiteralDeclaration_0() { return cOptionalEnumLiteralDeclaration_0; }

		//"optional"
		public Keyword getOptionalOptionalKeyword_0_0() { return cOptionalOptionalKeyword_0_0; }

		//required
		public EnumLiteralDeclaration getRequiredEnumLiteralDeclaration_1() { return cRequiredEnumLiteralDeclaration_1; }

		//"required"
		public Keyword getRequiredRequiredKeyword_1_0() { return cRequiredRequiredKeyword_1_0; }

		//repeated
		public EnumLiteralDeclaration getRepeatedEnumLiteralDeclaration_2() { return cRepeatedEnumLiteralDeclaration_2; }

		//"repeated"
		public Keyword getRepeatedRepeatedKeyword_2_0() { return cRepeatedRepeatedKeyword_2_0; }
	}

	public class ScalarTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "ScalarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInt32EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInt32Int32Keyword_0_0 = (Keyword)cInt32EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cInt64EnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cInt64Int64Keyword_1_0 = (Keyword)cInt64EnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cUint32EnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cUint32Uint32Keyword_2_0 = (Keyword)cUint32EnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cUint64EnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cUint64Uint64Keyword_3_0 = (Keyword)cUint64EnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSint32EnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSint32Sint32Keyword_4_0 = (Keyword)cSint32EnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cSint64EnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cSint64Sint64Keyword_5_0 = (Keyword)cSint64EnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cFixed32EnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cFixed32Fixed32Keyword_6_0 = (Keyword)cFixed32EnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFixed64EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFixed64Fixed64Keyword_7_0 = (Keyword)cFixed64EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSfixed32EnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSfixed32Sfixed32Keyword_8_0 = (Keyword)cSfixed32EnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cSfixed64EnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cSfixed64Sfixed64Keyword_9_0 = (Keyword)cSfixed64EnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cFloatFloatKeyword_10_0 = (Keyword)cFloatEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDoubleDoubleKeyword_11_0 = (Keyword)cDoubleEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cBoolBoolKeyword_12_0 = (Keyword)cBoolEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cStringStringKeyword_13_0 = (Keyword)cStringEnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cBytesEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cBytesBytesKeyword_14_0 = (Keyword)cBytesEnumLiteralDeclaration_14.eContents().get(0);
		
		//enum ScalarType:
		//	int32 | int64 | uint32 | uint64 | sint32 | sint64 | fixed32 | fixed64 | sfixed32 | sfixed64 | float | double | bool |
		//	string | bytes;
		public EnumRule getRule() { return rule; }

		//int32 | int64 | uint32 | uint64 | sint32 | sint64 | fixed32 | fixed64 | sfixed32 | sfixed64 | float | double | bool |
		//string | bytes
		public Alternatives getAlternatives() { return cAlternatives; }

		//int32
		public EnumLiteralDeclaration getInt32EnumLiteralDeclaration_0() { return cInt32EnumLiteralDeclaration_0; }

		//"int32"
		public Keyword getInt32Int32Keyword_0_0() { return cInt32Int32Keyword_0_0; }

		//int64
		public EnumLiteralDeclaration getInt64EnumLiteralDeclaration_1() { return cInt64EnumLiteralDeclaration_1; }

		//"int64"
		public Keyword getInt64Int64Keyword_1_0() { return cInt64Int64Keyword_1_0; }

		//uint32
		public EnumLiteralDeclaration getUint32EnumLiteralDeclaration_2() { return cUint32EnumLiteralDeclaration_2; }

		//"uint32"
		public Keyword getUint32Uint32Keyword_2_0() { return cUint32Uint32Keyword_2_0; }

		//uint64
		public EnumLiteralDeclaration getUint64EnumLiteralDeclaration_3() { return cUint64EnumLiteralDeclaration_3; }

		//"uint64"
		public Keyword getUint64Uint64Keyword_3_0() { return cUint64Uint64Keyword_3_0; }

		//sint32
		public EnumLiteralDeclaration getSint32EnumLiteralDeclaration_4() { return cSint32EnumLiteralDeclaration_4; }

		//"sint32"
		public Keyword getSint32Sint32Keyword_4_0() { return cSint32Sint32Keyword_4_0; }

		//sint64
		public EnumLiteralDeclaration getSint64EnumLiteralDeclaration_5() { return cSint64EnumLiteralDeclaration_5; }

		//"sint64"
		public Keyword getSint64Sint64Keyword_5_0() { return cSint64Sint64Keyword_5_0; }

		//fixed32
		public EnumLiteralDeclaration getFixed32EnumLiteralDeclaration_6() { return cFixed32EnumLiteralDeclaration_6; }

		//"fixed32"
		public Keyword getFixed32Fixed32Keyword_6_0() { return cFixed32Fixed32Keyword_6_0; }

		//fixed64
		public EnumLiteralDeclaration getFixed64EnumLiteralDeclaration_7() { return cFixed64EnumLiteralDeclaration_7; }

		//"fixed64"
		public Keyword getFixed64Fixed64Keyword_7_0() { return cFixed64Fixed64Keyword_7_0; }

		//sfixed32
		public EnumLiteralDeclaration getSfixed32EnumLiteralDeclaration_8() { return cSfixed32EnumLiteralDeclaration_8; }

		//"sfixed32"
		public Keyword getSfixed32Sfixed32Keyword_8_0() { return cSfixed32Sfixed32Keyword_8_0; }

		//sfixed64
		public EnumLiteralDeclaration getSfixed64EnumLiteralDeclaration_9() { return cSfixed64EnumLiteralDeclaration_9; }

		//"sfixed64"
		public Keyword getSfixed64Sfixed64Keyword_9_0() { return cSfixed64Sfixed64Keyword_9_0; }

		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_10() { return cFloatEnumLiteralDeclaration_10; }

		//"float"
		public Keyword getFloatFloatKeyword_10_0() { return cFloatFloatKeyword_10_0; }

		//double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_11() { return cDoubleEnumLiteralDeclaration_11; }

		//"double"
		public Keyword getDoubleDoubleKeyword_11_0() { return cDoubleDoubleKeyword_11_0; }

		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_12() { return cBoolEnumLiteralDeclaration_12; }

		//"bool"
		public Keyword getBoolBoolKeyword_12_0() { return cBoolBoolKeyword_12_0; }

		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_13() { return cStringEnumLiteralDeclaration_13; }

		//"string"
		public Keyword getStringStringKeyword_13_0() { return cStringStringKeyword_13_0; }

		//bytes
		public EnumLiteralDeclaration getBytesEnumLiteralDeclaration_14() { return cBytesEnumLiteralDeclaration_14; }

		//"bytes"
		public Keyword getBytesBytesKeyword_14_0() { return cBytesBytesKeyword_14_0; }
	}
	
	private final ProtoElements pProto;
	private final StatementElements pStatement;
	private final SyntaxElements pSyntax;
	private final PackageElements pPackage;
	private final ImportElements pImport;
	private final PublicImportElements pPublicImport;
	private final WeakImportElements pWeakImport;
	private final OptionElements pOption;
	private final NativeOptionElements pNativeOption;
	private final CustomOptionElements pCustomOption;
	private final ValueElements pValue;
	private final SimpleValueLinkElements pSimpleValueLink;
	private final EnumLinkElements pEnumLink;
	private final StringLinkElements pStringLink;
	private final BooleanLinkElements pBooleanLink;
	private final NumberLinkElements pNumberLink;
	private final IntLinkElements pIntLink;
	private final DoubleLinkElements pDoubleLink;
	private final BOOLElements unknownRuleBOOL;
	private final ComplexTypeElements pComplexType;
	private final ExtensibleTypeElements pExtensibleType;
	private final MessageElements pMessage;
	private final MessageElementElements pMessageElement;
	private final IndexedElementElements pIndexedElement;
	private final ExtensionRangeElements pExtensionRange;
	private final RangeElements pRange;
	private final MessageFieldElements pMessageField;
	private final GroupElements pGroup;
	private final ModifierElements unknownRuleModifier;
	private final TypeLinkElements pTypeLink;
	private final ComplexTypeLinkElements pComplexTypeLink;
	private final ScalarTypeLinkElements pScalarTypeLink;
	private final ScalarTypeElements unknownRuleScalarType;
	private final FieldOptionsElements pFieldOptions;
	private final FieldOptionElements pFieldOption;
	private final DefaultValueFieldOptionElements pDefaultValueFieldOption;
	private final NativeFieldOptionElements pNativeFieldOption;
	private final OptionSourceElements pOptionSource;
	private final EnumElements pEnum;
	private final EnumElementElements pEnumElement;
	private final EnumFieldElements pEnumField;
	private final ServiceElements pService;
	private final ServiceElementElements pServiceElement;
	private final RpcElements pRpc;
	private final MessageLinkElements pMessageLink;
	private final ExtendElements pExtend;
	private final Var_fullElements pVar_full;
	private final VarElements pVar;
	private final FULL_IDElements pFULL_ID;
	private final VarReservedElements pVarReserved;
	private final TerminalRule tNUMDOUBLE;
	private final EXPElements pEXP;
	private final TerminalRule tNUMINT;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ProtobufGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProto = new ProtoElements();
		this.pStatement = new StatementElements();
		this.pSyntax = new SyntaxElements();
		this.pPackage = new PackageElements();
		this.pImport = new ImportElements();
		this.pPublicImport = new PublicImportElements();
		this.pWeakImport = new WeakImportElements();
		this.pOption = new OptionElements();
		this.pNativeOption = new NativeOptionElements();
		this.pCustomOption = new CustomOptionElements();
		this.pValue = new ValueElements();
		this.pSimpleValueLink = new SimpleValueLinkElements();
		this.pEnumLink = new EnumLinkElements();
		this.pStringLink = new StringLinkElements();
		this.pBooleanLink = new BooleanLinkElements();
		this.pNumberLink = new NumberLinkElements();
		this.pIntLink = new IntLinkElements();
		this.pDoubleLink = new DoubleLinkElements();
		this.unknownRuleBOOL = new BOOLElements();
		this.pComplexType = new ComplexTypeElements();
		this.pExtensibleType = new ExtensibleTypeElements();
		this.pMessage = new MessageElements();
		this.pMessageElement = new MessageElementElements();
		this.pIndexedElement = new IndexedElementElements();
		this.pExtensionRange = new ExtensionRangeElements();
		this.pRange = new RangeElements();
		this.pMessageField = new MessageFieldElements();
		this.pGroup = new GroupElements();
		this.unknownRuleModifier = new ModifierElements();
		this.pTypeLink = new TypeLinkElements();
		this.pComplexTypeLink = new ComplexTypeLinkElements();
		this.pScalarTypeLink = new ScalarTypeLinkElements();
		this.unknownRuleScalarType = new ScalarTypeElements();
		this.pFieldOptions = new FieldOptionsElements();
		this.pFieldOption = new FieldOptionElements();
		this.pDefaultValueFieldOption = new DefaultValueFieldOptionElements();
		this.pNativeFieldOption = new NativeFieldOptionElements();
		this.pOptionSource = new OptionSourceElements();
		this.pEnum = new EnumElements();
		this.pEnumElement = new EnumElementElements();
		this.pEnumField = new EnumFieldElements();
		this.pService = new ServiceElements();
		this.pServiceElement = new ServiceElementElements();
		this.pRpc = new RpcElements();
		this.pMessageLink = new MessageLinkElements();
		this.pExtend = new ExtendElements();
		this.pVar_full = new Var_fullElements();
		this.pVar = new VarElements();
		this.pFULL_ID = new FULL_IDElements();
		this.pVarReserved = new VarReservedElements();
		this.tNUMDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMDOUBLE");
		this.pEXP = new EXPElements();
		this.tNUMINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMINT");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("protolipse.Protobuf".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Proto:
	//	syntax=Syntax? statements+=Statement*;
	public ProtoElements getProtoAccess() {
		return pProto;
	}
	
	public ParserRule getProtoRule() {
		return getProtoAccess().getRule();
	}

	////TODO: annotation_entry | doc_entry 
	//Statement:
	//	Package | Import | ComplexType | Extend | Service | Option;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////annotation_entry
	////         :AT Var ( '(' annotation_keyval ( ',' annotation_keyval )* ')' )?
	////annotation_keyval
	////         :Var_full '=' ( VarReserved | ID | FULL_ID | NUMFLOAT | NUMINT | NUMDOUBLE | 'true' | FALSE | STRING )
	////doc_entry
	////         :DOC
	//Syntax:
	//	"syntax" "=" name=STRING ";";
	public SyntaxElements getSyntaxAccess() {
		return pSyntax;
	}
	
	public ParserRule getSyntaxRule() {
		return getSyntaxAccess().getRule();
	}

	//Package:
	//	"package" name=Var_full ";";
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//Import:
	//	PublicImport | WeakImport;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//PublicImport:
	//	"import" "public" importURI=STRING ";";
	public PublicImportElements getPublicImportAccess() {
		return pPublicImport;
	}
	
	public ParserRule getPublicImportRule() {
		return getPublicImportAccess().getRule();
	}

	//WeakImport:
	//	"import" "weak"? importURI=STRING ";";
	public WeakImportElements getWeakImportAccess() {
		return pWeakImport;
	}
	
	public ParserRule getWeakImportRule() {
		return getWeakImportAccess().getRule();
	}

	//Option:
	//	NativeOption | CustomOption;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}

	////TODO: '('? name=Var_full ')'? AND complexTypes VarReserved | ID | FULL_ID |
	//NativeOption:
	//	"option" source=[MessageField|Var_full] "=" value=Value ";";
	public NativeOptionElements getNativeOptionAccess() {
		return pNativeOption;
	}
	
	public ParserRule getNativeOptionRule() {
		return getNativeOptionAccess().getRule();
	}

	//CustomOption:
	//	"option" source=ID "=" value=Value ";";
	public CustomOptionElements getCustomOptionAccess() {
		return pCustomOption;
	}
	
	public ParserRule getCustomOptionRule() {
		return getCustomOptionAccess().getRule();
	}

	////TODO: groups
	//Value:
	//	SimpleValueLink;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//SimpleValueLink:
	//	NumberLink | BooleanLink | StringLink | EnumLink;
	public SimpleValueLinkElements getSimpleValueLinkAccess() {
		return pSimpleValueLink;
	}
	
	public ParserRule getSimpleValueLinkRule() {
		return getSimpleValueLinkAccess().getRule();
	}

	//EnumLink:
	//	target=[EnumField];
	public EnumLinkElements getEnumLinkAccess() {
		return pEnumLink;
	}
	
	public ParserRule getEnumLinkRule() {
		return getEnumLinkAccess().getRule();
	}

	//StringLink:
	//	target=STRING;
	public StringLinkElements getStringLinkAccess() {
		return pStringLink;
	}
	
	public ParserRule getStringLinkRule() {
		return getStringLinkAccess().getRule();
	}

	//BooleanLink:
	//	target=BOOL;
	public BooleanLinkElements getBooleanLinkAccess() {
		return pBooleanLink;
	}
	
	public ParserRule getBooleanLinkRule() {
		return getBooleanLinkAccess().getRule();
	}

	//NumberLink:
	//	IntLink | DoubleLink;
	public NumberLinkElements getNumberLinkAccess() {
		return pNumberLink;
	}
	
	public ParserRule getNumberLinkRule() {
		return getNumberLinkAccess().getRule();
	}

	//IntLink:
	//	target=NUMINT;
	public IntLinkElements getIntLinkAccess() {
		return pIntLink;
	}
	
	public ParserRule getIntLinkRule() {
		return getIntLinkAccess().getRule();
	}

	//DoubleLink:
	//	target=NUMDOUBLE;
	public DoubleLinkElements getDoubleLinkAccess() {
		return pDoubleLink;
	}
	
	public ParserRule getDoubleLinkRule() {
		return getDoubleLinkAccess().getRule();
	}

	//enum BOOL:
	//	true | false;
	public BOOLElements getBOOLAccess() {
		return unknownRuleBOOL;
	}
	
	public EnumRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//ComplexType:
	//	Enum | ExtensibleType;
	public ComplexTypeElements getComplexTypeAccess() {
		return pComplexType;
	}
	
	public ParserRule getComplexTypeRule() {
		return getComplexTypeAccess().getRule();
	}

	//ExtensibleType:
	//	Message | Group;
	public ExtensibleTypeElements getExtensibleTypeAccess() {
		return pExtensibleType;
	}
	
	public ParserRule getExtensibleTypeRule() {
		return getExtensibleTypeAccess().getRule();
	}

	//Message:
	//	"message" name=ID "{" elements+=MessageElement* "}";
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}

	////TODO: | annotation_entry | doc_entry 
	//MessageElement:
	//	Message | IndexedElement | Enum | Service | Extend | ExtensionRange | Option;
	public MessageElementElements getMessageElementAccess() {
		return pMessageElement;
	}
	
	public ParserRule getMessageElementRule() {
		return getMessageElementAccess().getRule();
	}

	//IndexedElement:
	//	MessageField | Group;
	public IndexedElementElements getIndexedElementAccess() {
		return pIndexedElement;
	}
	
	public ParserRule getIndexedElementRule() {
		return getIndexedElementAccess().getRule();
	}

	//ExtensionRange:
	//	"extensions" ranges+=Range ("," ranges+=Range)* ";";
	public ExtensionRangeElements getExtensionRangeAccess() {
		return pExtensionRange;
	}
	
	public ParserRule getExtensionRangeRule() {
		return getExtensionRangeAccess().getRule();
	}

	//Range:
	//	from=NUMINT ("to" (to=NUMINT | max?="max"))?;
	public RangeElements getRangeAccess() {
		return pRange;
	}
	
	public ParserRule getRangeRule() {
		return getRangeAccess().getRule();
	}

	////TODO: ignore_block
	//MessageField:
	//	modifier=Modifier type=TypeLink name=Var "=" index=NUMINT options=FieldOptions? ";";
	public MessageFieldElements getMessageFieldAccess() {
		return pMessageField;
	}
	
	public ParserRule getMessageFieldRule() {
		return getMessageFieldAccess().getRule();
	}

	//Group:
	//	modifier=Modifier "group" name=Var "=" index=NUMINT "{" elements+=MessageField* "}";
	public GroupElements getGroupAccess() {
		return pGroup;
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//enum Modifier:
	//	optional | required | repeated;
	public ModifierElements getModifierAccess() {
		return unknownRuleModifier;
	}
	
	public EnumRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//TypeLink:
	//	ScalarTypeLink | ComplexTypeLink;
	public TypeLinkElements getTypeLinkAccess() {
		return pTypeLink;
	}
	
	public ParserRule getTypeLinkRule() {
		return getTypeLinkAccess().getRule();
	}

	//ComplexTypeLink:
	//	target=[ComplexType|Var_full];
	public ComplexTypeLinkElements getComplexTypeLinkAccess() {
		return pComplexTypeLink;
	}
	
	public ParserRule getComplexTypeLinkRule() {
		return getComplexTypeLinkAccess().getRule();
	}

	//ScalarTypeLink:
	//	target=ScalarType;
	public ScalarTypeLinkElements getScalarTypeLinkAccess() {
		return pScalarTypeLink;
	}
	
	public ParserRule getScalarTypeLinkRule() {
		return getScalarTypeLinkAccess().getRule();
	}

	//enum ScalarType:
	//	int32 | int64 | uint32 | uint64 | sint32 | sint64 | fixed32 | fixed64 | sfixed32 | sfixed64 | float | double | bool |
	//	string | bytes;
	public ScalarTypeElements getScalarTypeAccess() {
		return unknownRuleScalarType;
	}
	
	public EnumRule getScalarTypeRule() {
		return getScalarTypeAccess().getRule();
	}

	//FieldOptions:
	//	"[" options+=FieldOption ("," options+=FieldOption)* "]";
	public FieldOptionsElements getFieldOptionsAccess() {
		return pFieldOptions;
	}
	
	public ParserRule getFieldOptionsRule() {
		return getFieldOptionsAccess().getRule();
	}

	//FieldOption:
	//	DefaultValueFieldOption | NativeFieldOption;
	public FieldOptionElements getFieldOptionAccess() {
		return pFieldOption;
	}
	
	public ParserRule getFieldOptionRule() {
		return getFieldOptionAccess().getRule();
	}

	//DefaultValueFieldOption:
	//	"default" "=" value=Value;
	public DefaultValueFieldOptionElements getDefaultValueFieldOptionAccess() {
		return pDefaultValueFieldOption;
	}
	
	public ParserRule getDefaultValueFieldOptionRule() {
		return getDefaultValueFieldOptionAccess().getRule();
	}

	//NativeFieldOption:
	//	source=OptionSource "=" value=Value;
	public NativeFieldOptionElements getNativeFieldOptionAccess() {
		return pNativeFieldOption;
	}
	
	public ParserRule getNativeFieldOptionRule() {
		return getNativeFieldOptionAccess().getRule();
	}

	//OptionSource:
	//	target=[IndexedElement|Var_full];
	public OptionSourceElements getOptionSourceAccess() {
		return pOptionSource;
	}
	
	public ParserRule getOptionSourceRule() {
		return getOptionSourceAccess().getRule();
	}

	//Enum:
	//	"enum" name=ID "{" elements+=EnumElement* "}";
	public EnumElements getEnumAccess() {
		return pEnum;
	}
	
	public ParserRule getEnumRule() {
		return getEnumAccess().getRule();
	}

	//EnumElement:
	//	EnumField | CustomOption;
	public EnumElementElements getEnumElementAccess() {
		return pEnumElement;
	}
	
	public ParserRule getEnumElementRule() {
		return getEnumElementAccess().getRule();
	}

	//EnumField:
	//	name=ID "=" index=NUMINT ("[" options+=FieldOption ("," options+=FieldOption)* "]")? ";";
	public EnumFieldElements getEnumFieldAccess() {
		return pEnumField;
	}
	
	public ParserRule getEnumFieldRule() {
		return getEnumFieldAccess().getRule();
	}

	//Service:
	//	"service" name=ID "{" elements+=ServiceElement+ "}" ";"?;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}

	//ServiceElement:
	//	Rpc | Option;
	public ServiceElementElements getServiceElementAccess() {
		return pServiceElement;
	}
	
	public ParserRule getServiceElementRule() {
		return getServiceElementAccess().getRule();
	}

	//Rpc:
	//	"rpc" name=ID "(" argType=MessageLink ")" "returns" "(" returnType=MessageLink ")" ("{" options+=Option* "}")? ";";
	public RpcElements getRpcAccess() {
		return pRpc;
	}
	
	public ParserRule getRpcRule() {
		return getRpcAccess().getRule();
	}

	////TODO: VOID 'void'
	//MessageLink:
	//	target=[Message|FULL_ID];
	public MessageLinkElements getMessageLinkAccess() {
		return pMessageLink;
	}
	
	public ParserRule getMessageLinkRule() {
		return getMessageLinkAccess().getRule();
	}

	////TODO: type group?
	//Extend:
	//	"extend" type=([Message] | [Message|FULL_ID]) "{" elements+=MessageElement* "}";
	public ExtendElements getExtendAccess() {
		return pExtend;
	}
	
	public ParserRule getExtendRule() {
		return getExtendAccess().getRule();
	}

	//Var_full:
	//	FULL_ID | Var;
	public Var_fullElements getVar_fullAccess() {
		return pVar_full;
	}
	
	public ParserRule getVar_fullRule() {
		return getVar_fullAccess().getRule();
	}

	//Var:
	//	ID | VarReserved;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//FULL_ID:
	//	ID ("." ID)+;
	public FULL_IDElements getFULL_IDAccess() {
		return pFULL_ID;
	}
	
	public ParserRule getFULL_IDRule() {
		return getFULL_IDAccess().getRule();
	}

	//VarReserved:
	//	"to" | "package" | "syntax" | "import" | "option" | "message" | "service" | "enum" | "required" | "optional" |
	//	"repeated" | "extensions" | "extend" | "group" | "rpc" | "returns" | "int32" | "int64" | "uint32" | "uint64" |
	//	"sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "float" | "double" | "bool" | "string" |
	//	"bytes" | "default" | "max" | "void";
	public VarReservedElements getVarReservedAccess() {
		return pVarReserved;
	}
	
	public ParserRule getVarReservedRule() {
		return getVarReservedAccess().getRule();
	}

	//terminal NUMDOUBLE returns ecore::EDouble:
	//	NUMINT "." INT;
	public TerminalRule getNUMDOUBLERule() {
		return tNUMDOUBLE;
	} 

	////HEX returns ecore::ELong: '-'? '0' ( 'x' | 'X' ) HEX_DIGIT+;
	//EXP returns ecore::ELong:
	//	NUMINT ("e" | "E") NUMINT;
	public EXPElements getEXPAccess() {
		return pEXP;
	}
	
	public ParserRule getEXPRule() {
		return getEXPAccess().getRule();
	}

	////terminal HEX_DIGIT returns ecore::ELong: '0'..'9' | 'a'..'f' | 'A'..'F'; terminal NUMINT returns ecore::EInt:
	//	"0" | "-"? "1".."9" INT*;
	public TerminalRule getNUMINTRule() {
		return tNUMINT;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
