grammar protolipse.Protobuf with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate protobuf "http://protolipse/Protobuf"

Proto:
	('syntax' '=' syntax=STRING ';')?
	(imports+=Import)*
	('package' name=Var_full ';')?
	(statements+=Statement)*;

Statement:
	ComplexType | Extend | Service | CustomOption; //TODO: annotation_entry | doc_entry 

//annotation_entry
//         :AT Var ( '(' annotation_keyval ( ',' annotation_keyval )* ')' )?
//annotation_keyval
//         :Var_full '=' ( VarReserved | ID | FULL_ID | NUMFLOAT | NUMINT | NUMDOUBLE | 'true' | FALSE | STRING )
//doc_entry
//         :DOC
Import:
	PublicImport | WeakImport;
	
PublicImport:
	'import' 'public' importURI=STRING ';';
	
WeakImport:
	'import' ('weak')? importURI=STRING ';';	
	

Option:
	=>NativeOption | CustomOption;
	
NativeOption:
	'option' source=[MessageField|Var_full] '=' value=Value ';'; //TODO: '('? name=Var_full ')'? AND complexTypes VarReserved | ID | FULL_ID |
	
CustomOption:
	'option' source=ID '=' value=Value ';';
	
Value://TODO: groups
	SimpleValueLink;

SimpleValueLink:
	NumberLink | BooleanLink | StringLink | CustomIdLink;

CustomIdLink:
	target=ID;

//EnumLink:
//	target=[EnumField|ID];

StringLink:
	target=STRING;

BooleanLink:
	target=BOOL;

NumberLink:
	IntLink | DoubleLink;

IntLink:
	target=NUMINT;

DoubleLink:
	target=NUMDOUBLE;

enum BOOL:
	true | false;

ComplexType:
	Enum | ExtensibleType;

ExtensibleType:
	Message | Group;

Message:
	'message' name=ID '{' elements+=MessageElement* '}';

MessageElement:
	Message | IndexedElement | Oneof | Enum | Service | Extend | ExtensionRange | Option; //TODO: map field

Oneof:
	"oneof" name=ID "{" fields+=OneofField* "}";

OneofField:
	type=TypeLink name=Var "=" index=NUMINT options=FieldOptions? ";"; 
	
IndexedElement:
	MessageField | Group;

ExtensionRange:
	'extensions' ranges+=Range ("," ranges+=Range)* ';';

Range:
	from=NUMINT ('to' (to=NUMINT|max?="max") )?
;
	
MessageField:
	modifier=Modifier type=TypeLink name=Var '=' index=NUMINT options=FieldOptions? ';';
	
Group:
	modifier=Modifier 'group' name=Var '=' index=NUMINT '{' elements+=MessageField* '}';

enum Modifier:
	optional | required | repeated;

TypeLink:
	=> ScalarTypeLink | ComplexTypeLink;

ComplexTypeLink:
	target=[ComplexType|Var_full];

ScalarTypeLink:
	target=ScalarType;

enum ScalarType:
	int32 | int64 | uint32 | uint64 | sint32 | sint64 | fixed32 | fixed64 | sfixed32 | sfixed64 | float |
	double | bool | string | bytes;

FieldOptions:
	'[' options+=FieldOption (',' options+=FieldOption)* ']';

FieldOption:
	PackedValueFieldOption | DefaultValueFieldOption | NativeFieldOption;

PackedValueFieldOption:
	=> 'packed' '=' value=Value;
	
DefaultValueFieldOption:
	=> 'default' '=' value=Value;

NativeFieldOption:
	source=OptionSource '=' value=Value;

OptionSource:
	target=[IndexedElement|Var_full];

Enum:
	'enum' name=ID '{' elements+=EnumElement* '}' (';')?;

EnumElement:
	EnumField | CustomOption;

EnumField:
	name=ID '=' index=NUMINT ('[' options+=FieldOption (',' options+=FieldOption)* ']')? ';';

Service:
	'service' name=ID '{' elements+=ServiceElement* '}';

ServiceElement:
	Rpc | Option;

Rpc:
	=>'rpc' name=ID '(' argType=MessageLink ')' 'returns' '(' returnType=MessageLink ')' ('{' options+=Option* '}')? ';';

MessageLink:
	target=[Message|Var_full]; //TODO: VOID 'void'
	
Extend:
	=>'extend' type=([Message|Var_full]) '{' elements+=MessageElement* '}'; //TODO: type group?
	
Var_full:
	FULL_ID | Var;

Var:
	ID | VarReserved;

FULL_ID:
	ID ('.' ID)+;

VarReserved:
	'to' | 'package' | 'syntax' | 'import' | 'option' | 'message' | 'service' | 'enum' | 'required' | 'optional' |
	'repeated' | 'extensions' | 'extend' | 'group' | 'rpc' | 'returns' | 'int32' | 'int64' | 'uint32' | 'uint64' |
	'sint32' | 'sint64' | 'fixed32' | 'fixed64' | 'sfixed32' | 'sfixed64' | 'float' | 'double' | 'bool' | 'string' |
	'bytes' | 'default' | 'max' | 'void' | 'weak' | 'packed';

terminal NUMDOUBLE returns ecore::EDouble:
	NUMINT '.' INT;

	//HEX returns ecore::ELong: '-'? '0' ( 'x' | 'X' ) HEX_DIGIT+;
EXP returns ecore::ELong:
	NUMINT ('e' | 'E') NUMINT;

terminal NUMINT returns ecore::EInt:
	'0' | '-'? '1'..'9' INT*;

//terminal HEX_DIGIT returns ecore::ELong: '0'..'9' | 'a'..'f' | 'A'..'F';